{"version":3,"sources":["globalConstants.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","API_KEY","BASE_URL","ENDTIME","TRASHIDS","EXCLUDEIDS","REMOVEBOSSIDS","BOSSIDS","HUNTERAURA","CHAINID","WEBWRAPID","SUNDERDEBUFFID","BLOODTHIRSTID","SHOTID","VISCIDUSID","VEKNISSID","VEKNISS_THRESHOLD","MANA_POTIONID","SWIFT_BOOT_ID","STOPWATCH_ID","DARK_RUNEID","DEMON_RUNEID","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","DashboardPage","props","downloadExcel","setState","loading","actions","report","getFight","state","then","getFightsData","submit","promises","push","getBOSSDmg","Promise","all","trashIds","findTargetIds","fight","filteredBossIds","filter","v","includes","removedBossIds","getBossTrashDmg","reportId","getExcludedBossDmg","getManaPotion","getRogueSunderDebuff","getChainDebuff","getWebWrapDebuff","getRunes","getHunterbuff","getBossTrashSunderCasts","concat","enemies","map","enemy","guid","id","calculateBossTime","sum","fights","record","boss","end_time","start_time","calculatedSunderAvg","sunderCasts","sumWithoutTop4","i","sunder","sort","a","b","slice","reduce","item","furyWarriorCounts","type","length","Math","floor","calculateManualSum","manual","newManual","Object","values","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","manaPotion","runes","filteredBossDmg","hunterAura","chainDebuff","webWrapDebuff","rogueSunderDebuff","finalDmgMax","sunderBase","source","entry","trashDmg","find","trashEntry","total","filteredBossDmgData","rogueSunder","sunderPenalty","manaPotionCasts","runesCasts","chainTime","round","totalUptime","webWrapTime","hunterAuraPenalty","totalUses","finalDamage","Number","name","finalScore","toFixed","handleManualChange","e","target","value","this","dataSource","excelDataSource","fightsData","columns","title","dataIndex","filters","text","onFilter","sorter","QuestionCircleOutlined","render","children","chain","onBlur","style","maxWidth","web","tel","other","defaultSortOrder","gutter","width","placeholder","onChange","event","onClick","element","data","label","rowClassName","size","rowKey","pagination","Component","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getFightSummary","start","end","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","getCastsByAbility","getBuffsByAbility","initialState","dmg","poisonDmgTaken","viscidusBanned","swiftBoot","stopWatch","reducers","save","effects","getS","getState","getDmg","service","result","entries","getPoisonDmgTaken","POISONID","auras","validIds","x","aura","trashId","trashRecords","trashRecord","res","_","cloneDeep","newDmg","isInteger","newPromises","newCast","abilities","ability","getViscidusBanned","viscidusId","EXECUTEID","banned","hitCount","getViscidusCasts","viscidusCasts","getViscidusFrosts","OILFROSTID","WEAPONFROSTID","meleeFrost","viscidusMeleeFrost","fightsPromises","fightsSummary","BattleID","BattleName","StartTime","EndTime","composition","player","class","mark","damageDone","healingDone","getStopWatch","getSwiftBoot","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a928d4f.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: '8973e2f9f9412a72ff5f0aa377e1f391',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*12,  //12 Hours\r\n    TRASHIDS: [16778, 16449, 16505, 15981, 15979, 16025, 16193, 16154, 16375, 15976, 16400, 16243, 16156, 16861, 15975, 16290, 16474, 16164,\r\n        16506, 16573, 16168, 16020, 16022, 15977, 16163, 16984, 51179550, 16165, 16194, 16145, 16146, 16017, 16775, 16447, 16158, 16363,\r\n        16776, 16129, 15980, 16290, 16453, 16021, 16029, 16024, 16157, 16137, 15974, 16018, 17055, 16446, 16244, 16486, 16215, 15978,\r\n        16368, 16216, 16067],\r\n    EXCLUDEIDS: [15928, 15929, 15930, 16011, 16063, 16062, 16064, 16065, 16060, 16428, 16429, 16427, 16441, 16803, 16124, 16125, 16126,\r\n        16127, 16149, 16148, 16150, 16297, 16036, 16037, 16034, 16236, 16360, 16068, 14881, 16030, 16286, 4075, 16998],\r\n    REMOVEBOSSIDS: [15928, 15929, 15930, 16011, 16060, 16063, 16062, 16064, 16065],\r\n    BOSSIDS:[15990,15928, 16062, 16065, 16028, 16064, 16060, 16061, 15929, 15932, 15931, 16011, 16063, 15954, 15936, 15989, 15930, 15952, 15956, 15953],\r\n    HUNTERAURA: 20906,\r\n    CHAINID: 28410,\r\n    WEBWRAPID:28622,\r\n    SUNDERDEBUFFID: 11198,\r\n    BLOODTHIRSTID: 23894,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n    MANA_POTIONID: 17531,\r\n    SWIFT_BOOT_ID: 9175,\r\n    STOPWATCH_ID: 14530,\r\n    DARK_RUNEID: 27869,\r\n    DEMON_RUNEID: 16666,\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Button, Input, Table, Card, Tooltip, Col, Row} from 'antd'\r\nimport {QuestionCircleOutlined} from '@ant-design/icons'\r\nimport {actions, connect} from 'mirrorx'\r\nimport {globalConstants} from './globalConstants'\r\nimport './index.css'\r\nimport ReactExport from 'react-data-export'\r\n\r\nconst ExcelFile = ReactExport.ExcelFile\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn\r\n\r\nconst mapStateToProps = state => ({\r\n    bossDmg: state.report.bossDmg,\r\n    filteredBossDmg: state.report.filteredBossDmg,\r\n    fight: state.report.fight,\r\n    bossTrashDmg: state.report.bossTrashDmg,\r\n    bossTrashSunderCasts: state.report.bossTrashSunderCasts,\r\n    webWrapDebuff: state.report.webWrapDebuff,\r\n    chainDebuff: state.report.chainDebuff,\r\n    manaPotion: state.report.manaPotion,\r\n    runes: state.report.runes,\r\n    hunterAura: state.report.hunterAura,\r\n    rogueSunderDebuff: state.report.rogueSunderDebuff,\r\n    fightsData: state.report.fightsData\r\n})\r\n\r\nclass DashboardPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            report: null,\r\n            loading: false,\r\n            manual: [],\r\n        }\r\n    }\r\n\r\n    downloadExcel = () => {\r\n        this.setState({loading: true})\r\n        actions.report.getFight(this.state.report).then(()=>{\r\n            actions.report.getFightsData(this.state.report).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n        })\r\n    }\r\n\r\n    submit = () => {\r\n        let promises = []\r\n        this.setState({loading: true})\r\n\r\n        promises.push(actions.report.getBOSSDmg(this.state.report))\r\n        promises.push(actions.report.getFight(this.state.report))\r\n        Promise.all(promises).then(()=>{\r\n            promises = []\r\n            const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\r\n            const filteredBossIds = this.findTargetIds(globalConstants.BOSSIDS.filter(v => !globalConstants.REMOVEBOSSIDS.includes(v)), this.props.fight)\r\n            const removedBossIds = this.findTargetIds(globalConstants.REMOVEBOSSIDS, this.props.fight)\r\n            promises.push(actions.report.getBossTrashDmg({trashIds, reportId: this.state.report, removedBossIds}))\r\n            promises.push(actions.report.getExcludedBossDmg({removedBossIds, reportId: this.state.report}))\r\n            promises.push(actions.report.getManaPotion(this.state.report))\r\n            promises.push(actions.report.getRogueSunderDebuff(this.state.report))\r\n            promises.push(actions.report.getChainDebuff(this.state.report))\r\n            promises.push(actions.report.getWebWrapDebuff(this.state.report))\r\n            promises.push(actions.report.getRunes(this.state.report))\r\n            promises.push(actions.report.getHunterbuff(this.state.report))\r\n            promises.push(actions.report.getBossTrashSunderCasts({\r\n                trashIds: trashIds.concat(filteredBossIds),\r\n                reportId: this.state.report}))\r\n            Promise.all(promises).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n        })\r\n    }\r\n\r\n    findTargetIds = (trashIds, fight) => {\r\n        const enemies = fight?.enemies\r\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\r\n    }\r\n\r\n    calculateBossTime = (fight) => {\r\n        let sum = 0\r\n        fight&&fight.fights.filter(record=>record.boss!==0).map(record=>{\r\n            sum+=record.end_time-record.start_time\r\n        })\r\n        return sum/1000\r\n    }\r\n\r\n    calculatedSunderAvg = (sunderCasts) => {\r\n        let sumWithoutTop4 = sunderCasts?.map(i=>i.sunder).sort((a,b)=>b-a).slice(4).reduce((sum, item)=>sum+item)\r\n        let furyWarriorCounts = sunderCasts?.filter(item=> item.type ==='Warrior')?.length\r\n        return Math.floor(sumWithoutTop4/(furyWarriorCounts-4)*0.7)\r\n    }\r\n\r\n    calculateManualSum = (manual) => {\r\n        const newManual = {...manual, id:0}\r\n        return Object.values(newManual)?.reduce((a, b) => a + b, 0)\r\n    }\r\n\r\n    generateSource = () => {\r\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, manaPotion, runes, filteredBossDmg, hunterAura, chainDebuff, webWrapDebuff, rogueSunderDebuff} = this.props\r\n        let finalDmgMax = {}\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        let source = bossDmg?.map(entry=>{\r\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const filteredBossDmgData = filteredBossDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const sunderCasts = entry.type === 'Warrior' ? bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder :\r\n                bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.rogueSunder ? rogueSunderDebuff : 0\r\n            const sunderPenalty = entry.type==='Warrior' ? sunderCasts < sunderBase  ? Math.floor(-0.05 * trashDmg) : 0 :\r\n                entry.type==='Rogue' ? sunderCasts * 2000 : 0\r\n            const manual = this.state.manual.find(trashEntry=>trashEntry.id===entry.id) || {}\r\n            const manaPotionCasts = manaPotion?.find(trashEntry=>trashEntry.id===entry.id)?.total || 0\r\n            const runesCasts = runes?.find(trashEntry=>trashEntry.id===entry.id)?.runes\r\n            const chainTime = Math.round(chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const webWrapTime = Math.round(webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const hunterAuraStatus = hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUses>12 || hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime>500000\r\n            const hunterAuraPenalty = hunterAuraStatus && (entry.type==='Warrior'||entry.type==='Rogue') ? Math.floor(-0.015 * trashDmg) : 0\r\n            const finalDamage = Number(trashDmg) + Number(sunderPenalty) + Number(hunterAuraPenalty) + this.calculateManualSum(manual)\r\n            finalDmgMax[entry.type] = finalDmgMax[entry.type] > finalDamage ? finalDmgMax[entry.type] : finalDamage\r\n            return {\r\n                id: entry.id,\r\n                name: entry.name,\r\n                type: entry.type,\r\n                bossDmg: entry.total,\r\n                bossTrashDmg: trashDmg,\r\n                sunderCasts,\r\n                manaPotionCasts,\r\n                runesCasts,\r\n                filteredBossDmgData,\r\n                sunderPenalty,\r\n                hunterAuraPenalty,\r\n                finalDamage,\r\n                chainTime,\r\n                webWrapTime,\r\n                manual\r\n            }\r\n        })\r\n\r\n        source = source?.map(entry=>{\r\n            entry.finalScore = (entry.finalDamage/finalDmgMax[entry.type]).toFixed(2)\r\n            return entry\r\n        })\r\n        return source\r\n    }\r\n\r\n    handleManualChange = (e, record, type) => {\r\n        const newManual = this.state.manual.find(item=>item.id == record.id) ?\r\n            this.state.manual.map(item=>item.id === record.id ? {...item, [type]: Number(e.target.value)} : item) :\r\n            this.state.manual.concat([{id: record.id, [type]: Number(e.target.value)}])\r\n        this.setState({\r\n            manual: newManual\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const sunderBase = this.calculatedSunderAvg(this.props.bossTrashSunderCasts)\r\n        const dataSource =  this.generateSource()\r\n        const excelDataSource = this.props.fightsData\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: 'Boss伤害',\r\n                dataIndex: 'bossDmg',\r\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"去除DK2, DK3，孢子男，电男的伤害\">\r\n                    <span>有效boss伤害<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'filteredBossDmgData',\r\n            },\r\n            {\r\n                title: '全程有效伤害',\r\n                dataIndex: 'bossTrashDmg',\r\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"贼的破甲为强破\">\r\n                    <span>有效破甲<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderCasts',\r\n                render: (text,record)=> record.type ==='Warrior' || record.type ==='Rogue' ? text : '',\r\n            },\r\n            {\r\n                title: <Tooltip title={`平均数的70%为: ${sunderBase}，不足的扣5%有效伤害, 贼每个成功的强破补偿2000伤害`}>\r\n                    <span>破甲补/扣分<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"扣1.5%有效伤害\">\r\n                    <span>强击光环扣除<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'hunterAuraPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: '老克心控',\r\n                children: [\r\n                    {\r\n                        title: '时间',\r\n                        dataIndex: 'chainTime',\r\n                    },\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','chain'],\r\n                        render: (text, record) => <Input value={this.state.manual.chain} onBlur={(e)=>this.handleManualChange(e, record, 'chain')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title:<Tooltip title=\"蜘蛛3上墙\">\r\n                    <span>蛛网裹体<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                children: [\r\n                    {\r\n                        title: '时间',\r\n                        dataIndex: 'webWrapTime',\r\n                    },\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','web'],\r\n                        render: (text, record) => <Input value={this.state.manual.web} onBlur={(e)=>this.handleManualChange(e, record, 'web')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title:<Tooltip title=\"传送时间无法自动获取\">\r\n                    <span>跳舞男传送<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                children: [\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','tel'],\r\n                        render: (text, record) => <Input value={this.state.manual.tel} onBlur={(e)=>this.handleManualChange(e, record, 'tel')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title: '大蓝',\r\n                dataIndex: 'manaPotionCasts',\r\n                sorter: (a, b) => a.manaPotionCasts-b.manaPotionCasts,\r\n            },\r\n            {\r\n                title: '符文',\r\n                dataIndex: 'runesCasts',\r\n                sorter: (a, b) => a.runesCasts-b.runesCasts,\r\n            },\r\n            {\r\n                title: '其他补/扣分',\r\n                dataIndex: ['manual','other'],\r\n                render: (text, record) => <Input value={this.state.manual.other} onBlur={(e)=>this.handleManualChange(e, record, 'other')} style={{maxWidth: 100}}/>\r\n            },\r\n            {\r\n                title: '总分',\r\n                dataIndex: 'finalDamage',\r\n                sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n                defaultSortOrder: 'descend',\r\n            },\r\n            {\r\n                title: '百分比',\r\n                dataIndex: 'finalScore',\r\n            },\r\n        ]\r\n        return (\r\n            <Card title={<Row type=\"flex\" gutter={16}>\r\n                <Col>\r\n                    <Input\r\n                        style={{width: 400}}\r\n                        placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\r\n                        onChange={event => this.setState({report: event.target.value})}/>\r\n                </Col>\r\n                <Col>\r\n                    <Button onClick={this.submit}>提交</Button>\r\n                </Col>\r\n                <Col>\r\n                    <Button onClick={this.downloadExcel}>生成下载链接</Button>\r\n                </Col>\r\n                {excelDataSource &&  <Col><ExcelFile element={<Button>下载</Button>}>\r\n                    <ExcelSheet data={excelDataSource} name=\"原始数据\">\r\n                        <ExcelColumn label=\"mark\" value=\"mark\"/>\r\n                        <ExcelColumn label=\"BattleID\" value=\"BattleID\"/>\r\n                        <ExcelColumn label=\"BattleName\" value=\"BattleName\"/>\r\n                        <ExcelColumn label=\"StartTime\" value=\"StartTime\"/>\r\n                        <ExcelColumn label=\"EndTime\" value=\"EndTime\"/>\r\n                        <ExcelColumn label=\"class\" value=\"class\"/>\r\n                        <ExcelColumn label=\"name\" value=\"name\"/>\r\n                        <ExcelColumn label=\"damage-done\" value=\"damage-done\"/>\r\n                        <ExcelColumn label=\"damage-taken\" value=\"0\"/>\r\n                        <ExcelColumn label=\"healing\" value=\"healing\"/>\r\n                    </ExcelSheet>\r\n                </ExcelFile>\r\n                </Col>}\r\n            </Row>}>\r\n                <Table\r\n                    rowClassName={record=>record.type}\r\n                    size=\"small\"\r\n                    loading={this.state.loading}\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                    rowKey='id'\r\n                    pagination={false}\r\n                />\r\n\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null) (DashboardPage)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFightSummary (reportID, start, end) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/summary/${reportID}?api_key=${globalConstants.API_KEY}&start=${start}&end=${end}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId, enemy= false) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&hostility=${enemy?1:0}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getFightSummary,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget,\r\n    getCastsByAbility,\r\n    getBuffsByAbility\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        filteredBossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        chainDebuff: null,\r\n        webWrapDebuff: null,\r\n        rogueSunderDebuff: null,\r\n        viscidusBanned: null,\r\n        hunterAura: null,\r\n        manaPotion: null,\r\n        runes: null,\r\n        swiftBoot: null,\r\n        stopWatch: null,\r\n        fightsData: null\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n\r\n        async getChainDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.CHAINID)\r\n            actions.report.save({\r\n                chainDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getRogueSunderDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.SUNDERDEBUFFID, true)\r\n            const validIds= [...globalConstants.TRASHIDS, ...globalConstants.BOSSIDS].filter(x=>!globalConstants.REMOVEBOSSIDS.includes(x))\r\n            actions.report.save({\r\n                rogueSunderDebuff: result.data?.auras?.filter(aura=>validIds.includes(aura.guid)).reduce((sum,i)=>sum+Number(i.totalUses),0)\r\n            })\r\n        },\r\n\r\n        async getWebWrapDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.WEBWRAPID)\r\n            actions.report.save({\r\n                webWrapDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds, removedBossIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n            let newPromises = []\r\n            removedBossIds.map(trashId=> {\r\n                newPromises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(newPromises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExcludedBossDmg({reportId, removedBossIds}){\r\n            let result = actions.report.getS().report.filteredBossDmg\r\n            let promises = []\r\n            removedBossIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        filteredBossDmg: result\r\n                    })\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        res.rogueSunder = !!trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲')\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusBanned({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.BLOODTHIRSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.EXECUTEID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.banned = res.banned || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.banned =  Number.isInteger(newCast) ? res.banned + newCast : res.banned\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusBanned: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusCasts({reportId, viscidusId}){\r\n            const result = await service.getBOSSTrashCast(reportId, viscidusId)\r\n            actions.report.save({\r\n                viscidusCasts: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getViscidusFrosts({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.OILFROSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.WEAPONFROSTID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.meleeFrost = res.meleeFrost || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.meleeFrost =  Number.isInteger(newCast) ? res.meleeFrost + newCast : res.meleeFrost\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusMeleeFrost: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries,\r\n                filteredBossDmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n\r\n        async getFightsData(reportId){\r\n            let fights = actions.report.getS().report.fight.fights\r\n            const fightsPromises = fights.map(async fight=> {\r\n                const fightsSummary = await service.getFightSummary(reportId, fight.start_time, fight.end_time)\r\n                let record = {\r\n                    BattleID: fight.id,\r\n                    BattleName: fight.name,\r\n                    StartTime: fight.start_time,\r\n                    EndTime: fight.end_time,\r\n                }\r\n                return fightsSummary.data?.composition?.filter(player=>(player.type === 'Warrior' || player.type === 'Rogue')).map(player=>{\r\n                    return ({\r\n                        ...record,\r\n                        name: player.name,\r\n                        class: player.type,\r\n                        mark: record.BattleID+player.name,\r\n                        ['damage-done']: fightsSummary.data?.damageDone?.find(record=>record.id===player.id)?.total || 0,\r\n                        healing: fightsSummary.data?.healingDone?.find(record=>record.id===player.id)?.total || 0,\r\n                    })})\r\n            })\r\n            Promise.all(fightsPromises).then(trashRecords=> {\r\n                const fightsData = trashRecords.reduce((sum, trashRecord) => sum.concat(trashRecord), [])\r\n                actions.report.save({\r\n                    fightsData: fightsData\r\n                })}\r\n            )\r\n\r\n        },\r\n\r\n        async getManaPotion(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.MANA_POTIONID)\r\n            actions.report.save({\r\n                manaPotion: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getStopWatch(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.STOPWATCH_ID)\r\n            actions.report.save({\r\n                stopWatch: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getSwiftBoot(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.SWIFT_BOOT_ID)\r\n            actions.report.save({\r\n                swiftBoot: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRunes(reportId){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DARK_RUNEID))\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DEMON_RUNEID))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.runes = res.runes || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.runes =  Number.isInteger(newCast) ? res.runes + newCast : res.runes\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        runes: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getHunterbuff(reportId){\r\n            const result = await service.getBuffsByAbility(reportId, globalConstants.HUNTERAURA)\r\n            actions.report.save({\r\n                hunterAura: result.data.auras\r\n            })\r\n        },\r\n    }\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}