{"version":3,"sources":["globalConstants.js","Tactical.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","API_KEY","BASE_URL","ENDTIME","TRASHIDS","EXCLUDEIDS","REMOVEBOSSIDS","BOSSIDS","HUNTERAURA","CHAINID","WEBWRAPID","SUNDERDEBUFFID","BLOODTHIRSTID","SHOTID","VISCIDUSID","VEKNISSID","VEKNISS_THRESHOLD","MANA_POTIONID","SWIFT_BOOT_ID","STOPWATCH_ID","DARK_RUNEID","DEMON_RUNEID","DENSE_BOMB","HAT","SLIME","DEATHWISH","RECKLESSNESS","BLADEFLURRY","RUSH","THADDIUS_ENCOUNTER_ID","LOATHEB_ENCOUNTER_ID","NOTH_ENCOUNTER_ID","RESTO","DARKRES","HEIGAN_ENCOUNTER_ID","SWIFT_BOOT_ITEM_ID","FOUR_ENCOUNTER_ID","TacticalTable","dataSource","this","props","tactics","rowClassName","record","type","size","loading","columns","title","dataIndex","filters","text","value","onFilter","children","rowKey","pagination","Component","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","DashboardPage","downloadExcel","setState","actions","report","getFight","state","then","getFightsData","submit","tactical","promises","push","getBOSSDmg","Promise","all","slimeID","findTargetIds","fight","getSlime","reportId","getThaddius","get4DK","trashIds","filteredBossIds","filter","v","includes","removedBossIds","getBossTrashDmg","getExcludedBossDmg","getManaPotion","getRogueSunderDebuff","getChainDebuff","getWebWrapDebuff","getRunes","getHunterbuff","getBossTrashSunderCasts","concat","enemies","map","enemy","guid","id","calculateBossTime","sum","fights","boss","end_time","start_time","calculatedSunderAvg","sunderCasts","sumWithoutTop4","i","sunder","sort","a","b","slice","reduce","item","furyWarriorCounts","length","Math","floor","calculateManualSum","manual","newManual","Object","values","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","manaPotion","runes","filteredBossDmg","hunterAura","chainDebuff","webWrapDebuff","rogueSunderDebuff","finalDmgMax","sunderBase","source","entry","trashDmg","find","trashEntry","total","filteredBossDmgData","rogueSunder","sunderPenalty","manaPotionCasts","runesCasts","chainTime","round","totalUptime","webWrapTime","hunterAuraPenalty","totalUses","finalDamage","Number","name","finalScore","toFixed","handleManualChange","e","target","mergeTactics","tacticsArray","slimeTactics","thaddiusTactics","fourTactics","_","zipWith","c","fightsData","excelDataSource","sorter","QuestionCircleOutlined","render","chain","onBlur","style","maxWidth","web","tel","other","defaultSortOrder","gutter","checked","onChange","checkedChildren","unCheckedChildren","width","placeholder","event","onClick","element","data","label","Tactical","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getFightSummary","start","end","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","getCastsByAbility","getBuffsByAbility","getCastsByAbilityAndEncounter","encounterID","initialState","dmg","poisonDmgTaken","viscidusBanned","swiftBoot","stopWatch","reducers","save","effects","getS","getState","getDmg","service","result","entries","getPoisonDmgTaken","POISONID","auras","validIds","x","aura","trashId","trashRecords","trashRecord","res","cloneDeep","newDmg","isInteger","newPromises","newCast","abilities","ability","getViscidusBanned","viscidusId","EXECUTEID","banned","hitCount","getViscidusCasts","viscidusCasts","fightsPromises","fightsSummary","BattleID","BattleName","StartTime","EndTime","composition","player","class","mark","damageDone","healingDone","getStopWatch","getSwiftBoot","dense1","hat","resto","gear","deathwish1","deathwish2","deathwish3","recklessness","darkres","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f08fd44.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: '8973e2f9f9412a72ff5f0aa377e1f391',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*12,  //12 Hours\r\n    TRASHIDS: [16778, 16449, 16505, 15981, 15979, 16025, 16193, 16154, 16375, 15976, 16400, 16243, 16156, 16861, 15975, 16290, 16474, 16164,\r\n        16506, 16573, 16168, 16020, 16022, 15977, 16163, 16984, 51179550, 16165, 16194, 16145, 16146, 16017, 16775, 16447, 16158, 16363,\r\n        16776, 16129, 15980, 16290, 16453, 16021, 16029, 16024, 16157, 16137, 15974, 16018, 17055, 16446, 16244, 16486, 16215, 15978,\r\n        16368, 16216, 16067],\r\n    EXCLUDEIDS: [15928, 15929, 15930, 16011, 16063, 16062, 16064, 16065, 16060, 16428, 16429, 16427, 16441, 16803, 16124, 16125, 16126,\r\n        16127, 16149, 16148, 16150, 16297, 16036, 16037, 16034, 16236, 16360, 16068, 14881, 16030, 16286, 4075, 16998],\r\n    REMOVEBOSSIDS: [15928, 15929, 15930, 16011, 16060, 16063, 16062, 16064, 16065],\r\n    BOSSIDS:[15990,15928, 16062, 16065, 16028, 16064, 16060, 16061, 15929, 15932, 15931, 16011, 16063, 15954, 15936, 15989, 15930, 15952, 15956, 15953],\r\n    HUNTERAURA: 20906,\r\n    CHAINID: 28410,\r\n    WEBWRAPID:28622,\r\n    SUNDERDEBUFFID: 11198,\r\n    BLOODTHIRSTID: 23894,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n    MANA_POTIONID: 17531,\r\n    SWIFT_BOOT_ID: 9175,\r\n    STOPWATCH_ID: 14530,\r\n    DARK_RUNEID: 27869,\r\n    DEMON_RUNEID: 16666,\r\n    DENSE_BOMB: 23063, //致密炸弹\r\n    HAT: 11828, //电磁帽\r\n    SLIME: 16024, //胖子区软泥\r\n    DEATHWISH: 12328, //死愿ID\r\n    RECKLESSNESS: 1719, //鲁莽ID\r\n    BLADEFLURRY: 13877, //乱舞ID\r\n    RUSH: 13750, //冲动ID\r\n    THADDIUS_ENCOUNTER_ID: 1120, //电男encounterID\r\n    LOATHEB_ENCOUNTER_ID: 1115, //孢子encounterID\r\n    NOTH_ENCOUNTER_ID: 1117, //诺斯encounterID\r\n    RESTO: 11359, //滋补药水\r\n    DARKRES: 17548, //强效暗抗药水\r\n    HEIGAN_ENCOUNTER_ID: 1112, //希尔盖\r\n    SWIFT_BOOT_ITEM_ID: 7391, //迅捷鞋物品ID\r\n    FOUR_ENCOUNTER_ID: 1121, //4DKencounterID\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Table} from 'antd'\r\n\r\nclass TacticalTable extends Component{\r\n\r\n    render() {\r\n        const dataSource =  this.props.tactics\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: '构造区',\r\n                children: [\r\n                    {\r\n                        title: '胖子+软泥',\r\n                        children: [\r\n                            {\r\n                                title: '致密伤害',\r\n                                dataIndex: 'dense1',\r\n                            },\r\n                            {\r\n                                title: '帽子伤害',\r\n                                dataIndex: 'hat',\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        title: '电男死愿/冲动',\r\n                        dataIndex: 'deathwish1',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '瘟疫区',\r\n                children: [\r\n                    {\r\n                        title: '诺斯滋补',\r\n                        dataIndex: 'resto',\r\n                    },\r\n                    {\r\n                        title: '跳舞男迅捷鞋',\r\n                        dataIndex: 'swiftBoot',\r\n                    },\r\n                    {\r\n                        title: '孢子死愿/冲动',\r\n                        dataIndex: 'deathwish2',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '4DK',\r\n                children: [\r\n                    {\r\n                        title: '暗抗',\r\n                        dataIndex: 'darkres',\r\n                    },\r\n                    {\r\n                        title: '鲁莽/乱舞',\r\n                        dataIndex: 'recklessness',\r\n                    },\r\n                    {\r\n                        title: '死愿/冲动',\r\n                        dataIndex: 'deathwish3',\r\n                    },\r\n                ]\r\n            },\r\n\r\n\r\n            // {\r\n            //     title: '总分',\r\n            //     dataIndex: 'finalDamage',\r\n            //     sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n            //     defaultSortOrder: 'descend',\r\n            // },\r\n            // {\r\n            //     title: '百分比',\r\n            //     dataIndex: 'finalScore',\r\n            // },\r\n        ]\r\n        return (\r\n            <Table\r\n                rowClassName={record=>record.type}\r\n                size=\"small\"\r\n                loading={this.props.loading}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                rowKey='id'\r\n                pagination={false}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TacticalTable\r\n","import React, {Component} from 'react'\r\nimport _ from 'lodash'\r\nimport {Button, Input, Table, Card, Tooltip, Col, Row, Switch} from 'antd'\r\nimport {QuestionCircleOutlined} from '@ant-design/icons'\r\nimport {actions, connect} from 'mirrorx'\r\nimport {globalConstants} from './globalConstants'\r\nimport './index.css'\r\nimport ReactExport from 'react-data-export'\r\nimport TacticalTable from './Tactical'\r\n\r\nconst ExcelFile = ReactExport.ExcelFile\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn\r\n\r\nclass DashboardPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            report: null,\r\n            loading: false,\r\n            manual: [],\r\n            tactical: false\r\n        }\r\n    }\r\n\r\n    downloadExcel = () => {\r\n        this.setState({loading: true})\r\n        actions.report.getFight(this.state.report).then(()=>{\r\n            actions.report.getFightsData(this.state.report).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n        })\r\n    }\r\n\r\n    submit = () => {\r\n        const {tactical, report} = this.state\r\n        let promises = []\r\n        this.setState({loading: true})\r\n        promises.push(actions.report.getBOSSDmg(this.state.report))\r\n        promises.push(actions.report.getFight(this.state.report))\r\n        Promise.all(promises).then(()=>{\r\n            promises = []\r\n            if (tactical){\r\n                const slimeID = this.findTargetIds([globalConstants.SLIME], this.props.fight)\r\n                promises.push(actions.report.getSlime({reportId: report, slimeID}))\r\n                promises.push(actions.report.getThaddius(report))\r\n                promises.push(actions.report.get4DK(report))\r\n            }else {\r\n                const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\r\n                const filteredBossIds = this.findTargetIds(globalConstants.BOSSIDS.filter(v => !globalConstants.REMOVEBOSSIDS.includes(v)), this.props.fight)\r\n                const removedBossIds = this.findTargetIds(globalConstants.REMOVEBOSSIDS, this.props.fight)\r\n                promises.push(actions.report.getBossTrashDmg({trashIds, reportId: report, removedBossIds}))\r\n                promises.push(actions.report.getExcludedBossDmg({removedBossIds, reportId: report}))\r\n                promises.push(actions.report.getManaPotion(report))\r\n                promises.push(actions.report.getRogueSunderDebuff(report))\r\n                promises.push(actions.report.getChainDebuff(report))\r\n                promises.push(actions.report.getWebWrapDebuff(report))\r\n                promises.push(actions.report.getRunes(report))\r\n                promises.push(actions.report.getHunterbuff(report))\r\n                promises.push(actions.report.getBossTrashSunderCasts({\r\n                    trashIds: trashIds.concat(filteredBossIds),\r\n                    reportId: this.state.report}))\r\n            }\r\n            Promise.all(promises).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    findTargetIds = (trashIds, fight) => {\r\n        const enemies = fight?.enemies\r\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\r\n    }\r\n\r\n    calculateBossTime = (fight) => {\r\n        let sum = 0\r\n        fight&&fight.fights.filter(record=>record.boss!==0).map(record=>{\r\n            sum+=record.end_time-record.start_time\r\n        })\r\n        return sum/1000\r\n    }\r\n\r\n    calculatedSunderAvg = (sunderCasts) => {\r\n        let sumWithoutTop4 = sunderCasts?.map(i=>i.sunder).sort((a,b)=>b-a).slice(4).reduce((sum, item)=>sum+item)\r\n        let furyWarriorCounts = sunderCasts?.filter(item=> item.type ==='Warrior')?.length\r\n        return Math.floor(sumWithoutTop4/(furyWarriorCounts-4)*0.7)\r\n    }\r\n\r\n    calculateManualSum = (manual) => {\r\n        const newManual = {...manual, id:0}\r\n        return Object.values(newManual)?.reduce((a, b) => a + b, 0)\r\n    }\r\n\r\n    generateSource = () => {\r\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, manaPotion, runes, filteredBossDmg, hunterAura, chainDebuff, webWrapDebuff, rogueSunderDebuff} = this.props\r\n        let finalDmgMax = {}\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        let source = bossDmg?.map(entry=>{\r\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const filteredBossDmgData = filteredBossDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const sunderCasts = entry.type === 'Warrior' ? bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder :\r\n                bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.rogueSunder ? rogueSunderDebuff : 0\r\n            const sunderPenalty = entry.type==='Warrior' ? sunderCasts < sunderBase  ? Math.floor(-0.05 * trashDmg) : 0 :\r\n                entry.type==='Rogue' ? sunderCasts * 2000 : 0\r\n            const manual = this.state.manual.find(trashEntry=>trashEntry.id===entry.id) || {}\r\n            const manaPotionCasts = manaPotion?.find(trashEntry=>trashEntry.id===entry.id)?.total || 0\r\n            const runesCasts = runes?.find(trashEntry=>trashEntry.id===entry.id)?.runes\r\n            const chainTime = Math.round(chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const webWrapTime = Math.round(webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const hunterAuraStatus = hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUses>12 || hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime>500000\r\n            const hunterAuraPenalty = hunterAuraStatus && (entry.type==='Warrior'||entry.type==='Rogue') ? Math.floor(-0.015 * trashDmg) : 0\r\n            const finalDamage = Number(trashDmg) + Number(sunderPenalty) + Number(hunterAuraPenalty) + this.calculateManualSum(manual)\r\n            finalDmgMax[entry.type] = finalDmgMax[entry.type] > finalDamage ? finalDmgMax[entry.type] : finalDamage\r\n            return {\r\n                id: entry.id,\r\n                name: entry.name,\r\n                type: entry.type,\r\n                bossDmg: entry.total,\r\n                bossTrashDmg: trashDmg,\r\n                sunderCasts,\r\n                manaPotionCasts,\r\n                runesCasts,\r\n                filteredBossDmgData,\r\n                sunderPenalty,\r\n                hunterAuraPenalty,\r\n                finalDamage,\r\n                chainTime,\r\n                webWrapTime,\r\n                manual\r\n            }\r\n        })\r\n\r\n        source = source?.map(entry=>{\r\n            entry.finalScore = (entry.finalDamage/finalDmgMax[entry.type]).toFixed(2)\r\n            return entry\r\n        })\r\n        return source\r\n    }\r\n\r\n    handleManualChange = (e, record, type) => {\r\n        const newManual = this.state.manual.find(item=>item.id == record.id) ?\r\n            this.state.manual.map(item=>item.id === record.id ? {...item, [type]: Number(e.target.value)} : item) :\r\n            this.state.manual.concat([{id: record.id, [type]: Number(e.target.value)}])\r\n        this.setState({\r\n            manual: newManual\r\n        })\r\n    }\r\n\r\n    mergeTactics = () => {\r\n        const {slimeTactics, thaddiusTactics, fourTactics} = this.props\r\n        const tacticsArray = [slimeTactics, thaddiusTactics, fourTactics]\r\n        return _.zipWith(...tacticsArray, (a,b,c)=>({...a,...b,...c}))\r\n    }\r\n\r\n    render() {\r\n        const {fightsData, bossTrashSunderCasts} = this.props\r\n        const tactics = this.mergeTactics()\r\n        const {tactical, loading} = this.state\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        const dataSource =  this.generateSource()\r\n        const excelDataSource = fightsData\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: 'Boss伤害',\r\n                dataIndex: 'bossDmg',\r\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"去除DK2, DK3，孢子男，电男的伤害\">\r\n                    <span>有效boss伤害<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'filteredBossDmgData',\r\n            },\r\n            {\r\n                title: '全程有效伤害',\r\n                dataIndex: 'bossTrashDmg',\r\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"贼的破甲为强破\">\r\n                    <span>有效破甲<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderCasts',\r\n                render: (text,record)=> record.type ==='Warrior' || record.type ==='Rogue' ? text : '',\r\n            },\r\n            {\r\n                title: <Tooltip title={`平均数的70%为: ${sunderBase}，不足的扣5%有效伤害, 贼每个成功的强破补偿2000伤害`}>\r\n                    <span>破甲补/扣分<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"扣1.5%有效伤害\">\r\n                    <span>强击光环扣除<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'hunterAuraPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: '老克心控',\r\n                children: [\r\n                    {\r\n                        title: '时间',\r\n                        dataIndex: 'chainTime',\r\n                    },\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','chain'],\r\n                        render: (text, record) => <Input value={this.state.manual.chain} onBlur={(e)=>this.handleManualChange(e, record, 'chain')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title:<Tooltip title=\"蜘蛛3上墙\">\r\n                    <span>蛛网裹体<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                children: [\r\n                    {\r\n                        title: '时间',\r\n                        dataIndex: 'webWrapTime',\r\n                    },\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','web'],\r\n                        render: (text, record) => <Input value={this.state.manual.web} onBlur={(e)=>this.handleManualChange(e, record, 'web')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title:<Tooltip title=\"传送时间无法自动获取\">\r\n                    <span>跳舞男传送<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                children: [\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','tel'],\r\n                        render: (text, record) => <Input value={this.state.manual.tel} onBlur={(e)=>this.handleManualChange(e, record, 'tel')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title: '大蓝',\r\n                dataIndex: 'manaPotionCasts',\r\n                sorter: (a, b) => a.manaPotionCasts-b.manaPotionCasts,\r\n            },\r\n            {\r\n                title: '符文',\r\n                dataIndex: 'runesCasts',\r\n                sorter: (a, b) => a.runesCasts-b.runesCasts,\r\n            },\r\n            {\r\n                title: '其他补/扣分',\r\n                dataIndex: ['manual','other'],\r\n                render: (text, record) => <Input value={this.state.manual.other} onBlur={(e)=>this.handleManualChange(e, record, 'other')} style={{maxWidth: 100}}/>\r\n            },\r\n            {\r\n                title: '总分',\r\n                dataIndex: 'finalDamage',\r\n                sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n                defaultSortOrder: 'descend',\r\n            },\r\n            {\r\n                title: '百分比',\r\n                dataIndex: 'finalScore',\r\n            },\r\n        ]\r\n        return (\r\n            <Card title={<Row type=\"flex\" gutter={16}>\r\n                <Col>\r\n                    <Switch\r\n                        checked={tactical}\r\n                        onChange={(checked)=>this.setState({tactical: checked})}\r\n                        checkedChildren=\"战术动作\"\r\n                        unCheckedChildren=\"伤害统计\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Input\r\n                        style={{width: 400}}\r\n                        placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\r\n                        onChange={event => this.setState({report: event.target.value})}/>\r\n                </Col>\r\n                <Col>\r\n                    <Button onClick={this.submit}>提交</Button>\r\n                </Col>\r\n                {!tactical && <Col><Button onClick={this.downloadExcel}>生成下载链接</Button></Col>}\r\n                {excelDataSource &&  <Col><ExcelFile element={<Button>下载</Button>}>\r\n                    <ExcelSheet data={excelDataSource} name=\"原始数据\">\r\n                        <ExcelColumn label=\"mark\" value=\"mark\"/>\r\n                        <ExcelColumn label=\"BattleID\" value=\"BattleID\"/>\r\n                        <ExcelColumn label=\"BattleName\" value=\"BattleName\"/>\r\n                        <ExcelColumn label=\"StartTime\" value=\"StartTime\"/>\r\n                        <ExcelColumn label=\"EndTime\" value=\"EndTime\"/>\r\n                        <ExcelColumn label=\"class\" value=\"class\"/>\r\n                        <ExcelColumn label=\"name\" value=\"name\"/>\r\n                        <ExcelColumn label=\"damage-done\" value=\"damage-done\"/>\r\n                        <ExcelColumn label=\"healing\" value=\"healing\"/>\r\n                    </ExcelSheet>\r\n                </ExcelFile>\r\n                </Col>}\r\n            </Row>}>\r\n                {tactical ?\r\n                    <TacticalTable\r\n                        loading={loading}\r\n                        tactics={tactics}\r\n                    /> :\r\n                    <Table\r\n                        rowClassName={record => record.type}\r\n                        size=\"small\"\r\n                        loading={loading}\r\n                        dataSource={dataSource}\r\n                        columns={columns}\r\n                        rowKey='id'\r\n                        pagination={false}\r\n                    />\r\n                }\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state=>state.report) (DashboardPage)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFightSummary (reportID, start, end) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/summary/${reportID}?api_key=${globalConstants.API_KEY}&start=${start}&end=${end}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId, enemy= false) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&hostility=${enemy?1:0}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbilityAndEncounter (reportID, abilityId, encounterID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&encounter=${encounterID}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getFightSummary,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget,\r\n    getCastsByAbility,\r\n    getBuffsByAbility,\r\n    getCastsByAbilityAndEncounter\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        filteredBossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        chainDebuff: null,\r\n        webWrapDebuff: null,\r\n        rogueSunderDebuff: null,\r\n        viscidusBanned: null,\r\n        hunterAura: null,\r\n        manaPotion: null,\r\n        runes: null,\r\n        swiftBoot: null,\r\n        stopWatch: null,\r\n        fightsData: null,\r\n        tactics: null,\r\n        thaddiusTactics: null,\r\n        slimeTactics: null,\r\n        fourTactics: null\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n\r\n        async getChainDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.CHAINID)\r\n            actions.report.save({\r\n                chainDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getRogueSunderDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.SUNDERDEBUFFID, true)\r\n            const validIds= [...globalConstants.TRASHIDS, ...globalConstants.BOSSIDS].filter(x=>!globalConstants.REMOVEBOSSIDS.includes(x))\r\n            actions.report.save({\r\n                rogueSunderDebuff: result.data?.auras?.filter(aura=>validIds.includes(aura.guid)).reduce((sum,i)=>sum+Number(i.totalUses),0)\r\n            })\r\n        },\r\n\r\n        async getWebWrapDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.WEBWRAPID)\r\n            actions.report.save({\r\n                webWrapDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds, removedBossIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n            let newPromises = []\r\n            removedBossIds.map(trashId=> {\r\n                newPromises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(newPromises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExcludedBossDmg({reportId, removedBossIds}){\r\n            let result = actions.report.getS().report.filteredBossDmg\r\n            let promises = []\r\n            removedBossIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        filteredBossDmg: result\r\n                    })\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        res.rogueSunder = !!trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲')\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusBanned({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.BLOODTHIRSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.EXECUTEID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.banned = res.banned || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.banned =  Number.isInteger(newCast) ? res.banned + newCast : res.banned\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusBanned: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusCasts({reportId, viscidusId}){\r\n            const result = await service.getBOSSTrashCast(reportId, viscidusId)\r\n            actions.report.save({\r\n                viscidusCasts: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries,\r\n                filteredBossDmg: result.data.entries,\r\n                tactics: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n\r\n        async getFightsData(reportId){\r\n            let fights = actions.report.getS().report.fight.fights\r\n            const fightsPromises = fights.map(async fight=> {\r\n                const fightsSummary = await service.getFightSummary(reportId, fight.start_time, fight.end_time)\r\n                let record = {\r\n                    BattleID: fight.id,\r\n                    BattleName: fight.name,\r\n                    StartTime: fight.start_time,\r\n                    EndTime: fight.end_time,\r\n                }\r\n                return fightsSummary.data?.composition?.filter(player=>(player.type === 'Warrior' || player.type === 'Rogue')).map(player=>{\r\n                    return ({\r\n                        ...record,\r\n                        name: player.name,\r\n                        class: player.type,\r\n                        mark: record.BattleID+player.name,\r\n                        ['damage-done']: fightsSummary.data?.damageDone?.find(record=>record.id===player.id)?.total || 0,\r\n                        healing: fightsSummary.data?.healingDone?.find(record=>record.id===player.id)?.total || 0,\r\n                    })})\r\n            })\r\n            Promise.all(fightsPromises).then(trashRecords=> {\r\n                const fightsData = trashRecords.reduce((sum, trashRecord) => sum.concat(trashRecord), [])\r\n                actions.report.save({\r\n                    fightsData: fightsData\r\n                })}\r\n            )\r\n\r\n        },\r\n\r\n        async getManaPotion(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.MANA_POTIONID)\r\n            actions.report.save({\r\n                manaPotion: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getStopWatch(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.STOPWATCH_ID)\r\n            actions.report.save({\r\n                stopWatch: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getSwiftBoot(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.SWIFT_BOOT_ID)\r\n            actions.report.save({\r\n                swiftBoot: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRunes(reportId){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DARK_RUNEID))\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DEMON_RUNEID))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.runes = res.runes || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.runes =  Number.isInteger(newCast) ? res.runes + newCast : res.runes\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        runes: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getHunterbuff(reportId){\r\n            const result = await service.getBuffsByAbility(reportId, globalConstants.HUNTERAURA)\r\n            actions.report.save({\r\n                hunterAura: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getSlime({reportId, slimeID}){\r\n            let result = actions.report.getS().report.tactics\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.DENSE_BOMB, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.dense1 =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.HAT, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.hat =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RESTO, globalConstants.NOTH_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.resto =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, 0, globalConstants.HEIGAN_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id).gear.find(i=>i.id===globalConstants.SWIFT_BOOT_ITEM_ID)? 1 :0\r\n                    res.swiftBoot =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getThaddius(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async get4DK(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RECKLESSNESS, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.BLADEFLURRY, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DARKRES, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.darkres =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n        },\r\n    }\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}