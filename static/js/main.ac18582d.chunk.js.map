{"version":3,"sources":["globalConstants.js","Tactical.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","API_KEY","BASE_URL","ENDTIME","TRASHIDS","EXCLUDEIDS","REMOVEBOSSIDS","BOSSIDS","HUNTERAURA","CHAINID","WEBWRAPID","WEB_WRAP_RUN","SUNDERDEBUFFID","BLOODTHIRSTID","SHOTID","VISCIDUSID","VEKNISSID","VEKNISS_THRESHOLD","MANA_POTIONID","SWIFT_BOOT_ID","STOPWATCH_ID","DARK_RUNEID","DEMON_RUNEID","DENSE_BOMB","SAPPER","HAT","SLIME","DEATHWISH","RECKLESSNESS","BLADEFLURRY","RUSH","PUMMEL","SHIELDBASH","KICK","INTERRUPT1","THADDIUS_ENCOUNTER_ID","LOATHEB_ENCOUNTER_ID","NOTH_CURSE_ID","NOTH_ENCOUNTER_ID","RESTO","STONESHIELD","DARKRES","ICERES","NATUREDMG1","NATUREDMG2","SHADOW_BRUST","HEIGAN_ENCOUNTER_ID","SWIFT_BOOT_ITEM_ID","ROCKET_BOOT_ITEM_ID","FOUR_ENCOUNTER_ID","MAEXXNA_ENCOUNTER_ID","LIFE_STEAL_ID","ANUB_ENCOUNTER_ID","SAPPHIRON_ENCOUNTER_ID","KEL_ENCOUNTER_ID","KEL_ID","MELEE_ID","BS1_ID","BS4_ID","HS_ID","WW_ID","EX_ID","TacticalTable","dataSource","this","props","tactics","rowClassName","record","type","size","loading","columns","title","dataIndex","filters","text","value","onFilter","children","render","item","resto","stoneShield","natureres","darkAbsorb","darkres2","rowKey","pagination","Component","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","DashboardPage","downloadExcel","report","state","setState","promises","push","actions","getBOSSDmg","getFight","Promise","all","then","getFightsData","submit","tactical","slimeID","findTargetIds","fight","interruptID","getSlime","reportId","getThaddius","get4DK","getSpider","trashIds","filteredBossIds","filter","v","includes","removedBossIds","getBossTrashDmg","getExcludedBossDmg","getManaPotion","getRogueSunderDebuff","getWebWrapDebuff","getRunes","getHunterbuff","getBossTrashSunderCasts","concat","getBossTrashLess5SunderCasts","enemies","map","enemy","guid","id","calculatedSunderAvg","sunderCasts","sumWithoutTop4","i","sunder","sort","a","b","slice","reduce","sum","furyWarriorCounts","length","Math","floor","calculatedEffectiveSunderAvg","less5sunder","calculateManualSum","manual","newManual","Object","values","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","manaPotion","runes","filteredBossDmg","hunterAura","chainDebuff","bossTrashLess5SunderCasts","webWrapDebuff","rogueSunderDebuff","kelParry","finalDmgMax","less5SunderBase","sunderBase","source","entry","trashDmg","find","trashEntry","total","filteredBossDmgData","rogueSunder","less5sunderCasts","sunderPenalty","manaPotionCasts","runesCasts","chainTime","round","totalUptime","chainDmg","debuffDmg","kelParryDmg","webWrapTime","webDmg","hunterAuraPenalty","totalUses","finalDamage","Number","name","finalScore","toFixed","handleManualChange","e","target","mergeTactics","slimeTactics","thaddiusTactics","fourTactics","spiderTactics","_","zipWith","fightsData","excelDataSource","sorter","QuestionCircleOutlined","parseFloat","other","onBlur","style","maxWidth","defaultSortOrder","gutter","checked","onChange","checkedChildren","unCheckedChildren","width","placeholder","event","onClick","element","data","label","Tactical","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getFightSummary","start","end","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","getCastsByAbility","getBuffsByAbility","getBuffsByAbilityAndTime","getBuffsByAbilityAndEncounter","encounterID","getCastsByAbilityAndEncounter","getDamageDoneByAbilityAndEncounter","getBOSSTrashSundarCast","initialState","dmg","poisonDmgTaken","viscidusBanned","swiftBoot","stopWatch","reducers","save","effects","getS","getState","getDmg","service","result","entries","getPoisonDmgTaken","POISONID","validIds","x","auras","aura","trashId","trashRecords","trashRecord","res","cloneDeep","newDmg","isInteger","newPromises","newCast","abilities","ability","fights","fightsPromises","start_time","end_time","fightsSummary","BattleID","BattleName","StartTime","EndTime","BossID","boss","composition","player","class","mark","damageDone","healing","healingDone","getStopWatch","getSwiftBoot","dense1","hat","nothCurse","hasDebuff","hasRes","gear","deathwish1","deathwish2","deathwish3","recklessness","darkres","absorb","hitdetails","hitdetail","absorbOrOverheal","sapper","rocketBoot","deathwish4","interrupt2","hitCount","iceres","getChainDebuff","damage","bossFight","bossTime","debuff","avg","bands","getKelParry","kelID","abilityID","isMelee","avgDmg","parryCount","missdetails","detail","count","cpDmg","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac18582d.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: '8973e2f9f9412a72ff5f0aa377e1f391',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*12,  //12 Hours\r\n    TRASHIDS: [16778, 16449, 15981, 15979, 16025, 16193, 16154, 16375, 15976, 16400, 16243, 16156, 16861, 15975, 16290, 16474, 16164,\r\n        16506, 16573, 16168, 16020, 16022, 15977, 16163, 16984, 51179550, 16165, 16194, 16145, 16146, 16017, 16775, 16447, 16158, 16363,\r\n        16776, 16129, 15980, 16290, 16453, 16021, 16029, 16024, 16157, 16137, 15974, 16018, 17055, 16446, 16244, 16486, 16215, 15978,\r\n        16368, 16216, 16067, 16124, 16125, 16126, 16127, 16148, 16149, 16150],\r\n    EXCLUDEIDS: [15928, 15929, 16505, 15930, 16011, 16063, 16062, 16064, 16065, 16060, 16428, 16429, 16427, 16441, 16803, 16297, 16036,\r\n        16037, 16034, 16236, 16360, 16068, 14881, 16030, 16286, 4075, 16998],\r\n    REMOVEBOSSIDS: [15928, 15929, 15930, 16011, 16063, 16062, 16064, 16065, 15990],\r\n    BOSSIDS:[15990,15928, 16062, 16065, 16028, 16064, 16060, 16061, 15929, 15932, 15931, 16011, 16063, 15954, 15936, 15989, 15930, 15952, 15956, 15953],\r\n    HUNTERAURA: 20906,\r\n    CHAINID: 28410,\r\n    WEBWRAPID:28622,\r\n    WEB_WRAP_RUN: 7, //second\r\n    SUNDERDEBUFFID: 11198,\r\n    BLOODTHIRSTID: 23894,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n    MANA_POTIONID: 17531,\r\n    SWIFT_BOOT_ID: 9175,\r\n    STOPWATCH_ID: 14530,\r\n    DARK_RUNEID: 27869,\r\n    DEMON_RUNEID: 16666,\r\n    DENSE_BOMB: 23063, //致密炸弹\r\n    SAPPER: 13241, //地精工兵\r\n    HAT: 11828, //电磁帽\r\n    SLIME: 16024, //胖子区软泥\r\n    DEATHWISH: 12328, //死愿ID\r\n    RECKLESSNESS: 1719, //鲁莽ID\r\n    BLADEFLURRY: 13877, //乱舞ID\r\n    RUSH: 13750, //冲动ID\r\n    PUMMEL: 6554, //拳击ID\r\n    SHIELDBASH: 1672, //盾击ID\r\n    KICK: 1769, //脚踢ID\r\n    INTERRUPT1: 15987, //侍僧ID\r\n    THADDIUS_ENCOUNTER_ID: 1120, //电男encounterID\r\n    LOATHEB_ENCOUNTER_ID: 1115, //孢子encounterID\r\n    NOTH_CURSE_ID: 29213, //诺斯诅咒ID\r\n    NOTH_ENCOUNTER_ID: 1117, //诺斯encounterID\r\n    RESTO: 11359, //滋补药水\r\n    STONESHIELD: 17540, //石盾法术ID\r\n    DARKRES: 17548, //强效暗抗药水\r\n    ICERES: 17544, //强效暗抗药水\r\n    NATUREDMG1: 30043, //小蜘蛛自然伤害1\r\n    NATUREDMG2: 28428, //小蜘蛛自然伤害2\r\n    SHADOW_BRUST: 28447, //侍僧暗影爆发\r\n    HEIGAN_ENCOUNTER_ID: 1112, //希尔盖\r\n    SWIFT_BOOT_ITEM_ID: 7391, //迅捷鞋物品ID\r\n    ROCKET_BOOT_ITEM_ID: 7189, //火箭鞋物品ID\r\n    FOUR_ENCOUNTER_ID: 1121, //4DKencounterID\r\n    MAEXXNA_ENCOUNTER_ID: 1116, //蜘蛛3 ID\r\n    LIFE_STEAL_ID: 28542, //冰龙生命吸取ID\r\n    ANUB_ENCOUNTER_ID: 1107, //蜘蛛1 ID\r\n    SAPPHIRON_ENCOUNTER_ID: 1119, //冰龙ID\r\n    KEL_ENCOUNTER_ID: 1114, //老克ID\r\n    KEL_ID: 15990,\r\n    MELEE_ID: 1,\r\n    BS1_ID:23881,\r\n    BS4_ID:23894,\r\n    HS_ID: 25286,\r\n    WW_ID: 1680,\r\n    EX_ID: 20647,\r\n\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Table} from 'antd'\r\n\r\nclass TacticalTable extends Component{\r\n\r\n    render() {\r\n        const dataSource =  this.props.tactics\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: '构造区',\r\n                children: [\r\n                    {\r\n                        title: '胖子+软泥',\r\n                        children: [\r\n                            {\r\n                                title: '致密伤害',\r\n                                dataIndex: 'dense1',\r\n                            },\r\n                            {\r\n                                title: '帽子伤害',\r\n                                dataIndex: 'hat',\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        title: '电男死愿/冲动',\r\n                        dataIndex: 'deathwish1',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '瘟疫区',\r\n                children: [\r\n                    {\r\n                        title: '诺斯滋补',\r\n                        dataIndex: 'resto',\r\n                        render: (text, item)=> item.resto ? '有诅咒没滋补或吃了被取消':'没问题'\r\n                    },\r\n                    {\r\n                        title: '跳舞男迅捷鞋',\r\n                        dataIndex: 'swiftBoot',\r\n                    },\r\n                    {\r\n                        title: '孢子死愿/冲动',\r\n                        dataIndex: 'deathwish2',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '军事区',\r\n                children: [\r\n                    {\r\n                        title: '邪恶武器石盾',\r\n                        dataIndex: 'stoneShield',\r\n                        render: (text, item)=> item.stoneShield ? '1':'0'\r\n                    },\r\n                    {\r\n                        title: '4DK暗抗',\r\n                        dataIndex: 'darkres',\r\n                    },\r\n                    {\r\n                        title: '4DK鲁莽/乱舞',\r\n                        dataIndex: 'recklessness',\r\n                    },\r\n                    {\r\n                        title: '4DK死愿/冲动',\r\n                        dataIndex: 'deathwish3',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '蜘蛛区',\r\n                children: [\r\n                    {\r\n                        title: '自然抗',\r\n                        dataIndex: 'natureres',\r\n                        render: (text, item)=> item.natureres ? '有自然抗或没受伤害': '可能没有(需复查)'\r\n                    },\r\n                    {\r\n                        title: '蜘蛛1火箭鞋',\r\n                        dataIndex: 'rocketBoot',\r\n                    },\r\n                    {\r\n                        title: '侍僧暗吸',\r\n                        dataIndex: 'darkAbsorb',\r\n                        render: (text, item)=> item.darkAbsorb ? '有':'没有'\r\n                    },\r\n                    {\r\n                        title: '侍僧地精工兵',\r\n                        dataIndex: 'sapper',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '中心区',\r\n                children: [\r\n                    {\r\n                        title: '冰龙暗抗吸收',\r\n                        dataIndex: 'darkres2',\r\n                        render: (text, item)=> !item.darkres2 && '没有'\r\n                    },\r\n                    {\r\n                        title: '冰龙死愿',\r\n                        dataIndex: 'deathwish4',\r\n                    },\r\n                    {\r\n                        title: '老克冰抗',\r\n                        dataIndex: 'iceres',\r\n                    },\r\n                    {\r\n                        title: '老克打断',\r\n                        dataIndex: 'interrupt2',\r\n                    },\r\n                ]\r\n            },\r\n\r\n\r\n            // {\r\n            //     title: '总分',\r\n            //     dataIndex: 'finalDamage',\r\n            //     sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n            //     defaultSortOrder: 'descend',\r\n            // },\r\n            // {\r\n            //     title: '百分比',\r\n            //     dataIndex: 'finalScore',\r\n            // },\r\n        ]\r\n        return (\r\n            <Table\r\n                rowClassName={record=>record.type}\r\n                size=\"small\"\r\n                loading={this.props.loading}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                rowKey='id'\r\n                pagination={false}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TacticalTable\r\n","import React, {Component} from 'react'\r\nimport _ from 'lodash'\r\nimport {Button, Input, Table, Card, Tooltip, Col, Row, Switch} from 'antd'\r\nimport {QuestionCircleOutlined} from '@ant-design/icons'\r\nimport {actions, connect} from 'mirrorx'\r\nimport {globalConstants} from './globalConstants'\r\nimport './index.css'\r\nimport ReactExport from 'react-data-export'\r\nimport TacticalTable from './Tactical'\r\n\r\nconst ExcelFile = ReactExport.ExcelFile\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn\r\n\r\nclass DashboardPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            report: null,\r\n            loading: false,\r\n            manual: [],\r\n            tactical: false\r\n        }\r\n    }\r\n\r\n    downloadExcel = () => {\r\n        const {report} = this.state\r\n        this.setState({loading: true})\r\n        let promises = []\r\n        promises.push(actions.report.getBOSSDmg(report))\r\n        promises.push(actions.report.getFight(report))\r\n        Promise.all(promises).then(()=>{\r\n            actions.report.getFightsData(report).then(()=>{this.setState({loading: false})})\r\n            // const kelID = this.findTargetIds([globalConstants.KEL_ID], this.props.fight)\r\n            // promises = []\r\n            // promises.push(actions.report.getKelParry({reportId: report, kelID}))\r\n            // promises.push(actions.report.getChainDebuff(report))\r\n            // promises.push(actions.report.getWebWrapDebuff(report))\r\n        })\r\n    }\r\n\r\n    submit = () => {\r\n        const {tactical, report} = this.state\r\n        let promises = []\r\n        this.setState({loading: true})\r\n        promises.push(actions.report.getBOSSDmg(this.state.report))\r\n        promises.push(actions.report.getFight(this.state.report))\r\n        Promise.all(promises).then(()=>{\r\n            promises = []\r\n            if (tactical){\r\n                const slimeID = this.findTargetIds([globalConstants.SLIME], this.props.fight)\r\n                const interruptID = this.findTargetIds([globalConstants.INTERRUPT1], this.props.fight)\r\n                promises.push(actions.report.getSlime({reportId: report, slimeID}))\r\n                promises.push(actions.report.getThaddius(report))\r\n                promises.push(actions.report.get4DK(report))\r\n                promises.push(actions.report.getSpider({reportId: report, interruptID}))\r\n            }else {\r\n                const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\r\n                const filteredBossIds = this.findTargetIds(globalConstants.BOSSIDS.filter(v => !globalConstants.REMOVEBOSSIDS.includes(v)), this.props.fight)\r\n                const removedBossIds = this.findTargetIds(globalConstants.REMOVEBOSSIDS, this.props.fight)\r\n                promises.push(actions.report.getBossTrashDmg({trashIds, reportId: report, removedBossIds}))\r\n                promises.push(actions.report.getExcludedBossDmg({removedBossIds, reportId: report}))\r\n                promises.push(actions.report.getManaPotion(report))\r\n                promises.push(actions.report.getRogueSunderDebuff(report))\r\n                // promises.push(actions.report.getChainDebuff(report))\r\n                promises.push(actions.report.getWebWrapDebuff(report))\r\n                promises.push(actions.report.getRunes(report))\r\n                promises.push(actions.report.getHunterbuff(report))\r\n                promises.push(actions.report.getBossTrashSunderCasts({\r\n                    trashIds: trashIds.concat(filteredBossIds),\r\n                    reportId: this.state.report}))\r\n                promises.push(actions.report.getBossTrashLess5SunderCasts({\r\n                    trashIds: trashIds.concat(filteredBossIds),\r\n                    reportId: this.state.report}))\r\n            }\r\n            Promise.all(promises).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    findTargetIds = (trashIds, fight) => {\r\n        const enemies = fight?.enemies\r\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\r\n    }\r\n\r\n    calculatedSunderAvg = (sunderCasts) => {\r\n        let sumWithoutTop4 = sunderCasts?.map(i=>i.sunder).sort((a,b)=>b-a).slice(4).reduce((sum, item)=>sum+item)\r\n        let furyWarriorCounts = sunderCasts?.filter(item=> item.type ==='Warrior')?.length\r\n        return Math.floor(sumWithoutTop4/(furyWarriorCounts-4)*0.7)\r\n    }\r\n\r\n    calculatedEffectiveSunderAvg = (sunderCasts) => {\r\n        let sumWithoutTop4 = sunderCasts?.map(i=>i.less5sunder).sort((a,b)=>b-a).slice(4).reduce((sum, item)=>sum+item)\r\n        let furyWarriorCounts = sunderCasts?.filter(item=> item.type ==='Warrior')?.length\r\n        return Math.floor(sumWithoutTop4/(furyWarriorCounts-4)*0.7)\r\n    }\r\n\r\n    calculateManualSum = (manual) => {\r\n        const newManual = {...manual, id:0}\r\n        return Object.values(newManual)?.reduce((a, b) => a + b, 0)\r\n    }\r\n\r\n    generateSource = () => {\r\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, manaPotion, runes, filteredBossDmg, hunterAura, chainDebuff, bossTrashLess5SunderCasts, webWrapDebuff, rogueSunderDebuff, kelParry} = this.props\r\n        let finalDmgMax = {}\r\n        const less5SunderBase = this.calculatedEffectiveSunderAvg(bossTrashLess5SunderCasts)\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        let source = bossDmg?.map(entry=>{\r\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const filteredBossDmgData = filteredBossDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const sunderCasts = entry.type === 'Warrior' ? bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder :\r\n                bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.rogueSunder ? rogueSunderDebuff : 0\r\n            const less5sunderCasts = entry.type === 'Warrior' ? bossTrashLess5SunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.less5sunder : ''\r\n            const sunderPenalty = entry.type==='Warrior' ? less5sunderCasts < less5SunderBase || sunderCasts< sunderBase  ? Math.floor(-0.05 * trashDmg) : 0 :\r\n                entry.type==='Rogue' ? sunderCasts * 2200 : 0\r\n            const manual = this.state.manual.find(trashEntry=>trashEntry.id===entry.id) || {}\r\n            const manaPotionCasts = manaPotion?.find(trashEntry=>trashEntry.id===entry.id)?.total || 0\r\n            const runesCasts = runes?.find(trashEntry=>trashEntry.id===entry.id)?.runes\r\n            const chainTime = Math.round(chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const chainDmg = chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.debuffDmg || ''\r\n            const kelParryDmg = kelParry?.find(trashEntry=>trashEntry.id===entry.id)?.kelParryDmg\r\n            const webWrapTime = Math.round(webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const webDmg = webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.debuffDmg || ''\r\n            const hunterAuraStatus = hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUses>12 || hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime>500000\r\n            const hunterAuraPenalty = hunterAuraStatus && (entry.type==='Warrior'||entry.type==='Rogue') ? Math.floor(-0.015 * trashDmg) : 0\r\n            const finalDamage = Number(trashDmg) + Number(sunderPenalty) + Number(hunterAuraPenalty) + this.calculateManualSum(manual)\r\n            finalDmgMax[entry.type] = finalDmgMax[entry.type] > finalDamage ? finalDmgMax[entry.type] : finalDamage\r\n            return {\r\n                id: entry.id,\r\n                name: entry.name,\r\n                type: entry.type,\r\n                bossDmg: entry.total,\r\n                bossTrashDmg: trashDmg,\r\n                sunderCasts,\r\n                manaPotionCasts,\r\n                runesCasts,\r\n                filteredBossDmgData,\r\n                sunderPenalty,\r\n                hunterAuraPenalty,\r\n                finalDamage,\r\n                chainTime,\r\n                chainDmg,\r\n                webWrapTime,\r\n                webDmg,\r\n                manual,\r\n                kelParryDmg,\r\n                less5sunderCasts\r\n            }\r\n        })\r\n\r\n        source = source?.map(entry=>{\r\n            entry.finalScore = (entry.finalDamage/finalDmgMax[entry.type]).toFixed(2)\r\n            return entry\r\n        })\r\n        return source\r\n    }\r\n\r\n    handleManualChange = (e, record, type) => {\r\n        const newManual = this.state.manual.find(item=>item.id == record.id) ?\r\n            this.state.manual.map(item=>item.id === record.id ? {...item, [type]: Number(e.target.value)} : item) :\r\n            this.state.manual.concat([{id: record.id, [type]: Number(e.target.value)}])\r\n        this.setState({\r\n            manual: newManual\r\n        })\r\n    }\r\n\r\n    mergeTactics = () => {\r\n        const {slimeTactics, thaddiusTactics, fourTactics, spiderTactics} = this.props\r\n        const tacticsArray = [slimeTactics, thaddiusTactics, fourTactics, spiderTactics]\r\n        return tacticsArray.reduce((sum,item)=>_.zipWith(sum, item, (a,b,)=>({...a,...b})))\r\n    }\r\n\r\n    render() {\r\n        const {fightsData, bossTrashSunderCasts, bossTrashLess5SunderCasts} = this.props\r\n        const tactics = this.mergeTactics()\r\n        const {tactical, loading} = this.state\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        const less5SunderBase = this.calculatedEffectiveSunderAvg(bossTrashLess5SunderCasts)\r\n        const dataSource =  this.generateSource()\r\n        const excelDataSource = fightsData\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: 'Boss伤害',\r\n                dataIndex: 'bossDmg',\r\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"去除DK2, DK3，孢子男，电男，老克的伤害\">\r\n                    <span>有效boss伤害<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'filteredBossDmgData',\r\n            },\r\n            {\r\n                title: '全程有效伤害',\r\n                dataIndex: 'bossTrashDmg',\r\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"目标是考核DPS的怪，括号里是对有效目标破甲层数不足5层时打的破甲，贼的破甲为强破\">\r\n                    <span>有效目标破甲数<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderCasts',\r\n                render: (text,record)=> record.type ==='Warrior' ? `\r\n                ${text}(${record.less5sunderCasts} - ${(parseFloat(record.less5sunderCasts)/parseFloat(record.sunderCasts)*100).toFixed(2)}%)`\r\n                    : record.type ==='Rogue' ? text : '',\r\n            },\r\n            {\r\n                title: <Tooltip title={`平均数的70%为: ${sunderBase}(${less5SunderBase})，任意一项不足的扣5%有效伤害, 贼每个成功的强破补偿2200伤害`}>\r\n                    <span>破甲补/扣分<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"扣1.5%有效伤害\">\r\n                    <span>强击光环扣除<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'hunterAuraPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            // {\r\n            //     title: '老克',\r\n            //     children: [\r\n            //         {\r\n            //             title: '心控时间',\r\n            //             dataIndex: 'chainTime',\r\n            //         },\r\n            //         {\r\n            //             title: '心控补偿',\r\n            //             dataIndex: 'chainDmg',\r\n            //         },\r\n            //         {\r\n            //             title: <Tooltip title=\"对于所有的招架，战士的肉搏伤害按照个人平均值两倍进行补偿；战士技能伤害，贼肉搏伤害按照个人平均值进行补偿\">\r\n            //                 <span>招架补偿<QuestionCircleOutlined /></span>\r\n            //             </Tooltip>,\r\n            //             dataIndex: 'kelParryDmg',\r\n            //             render: text=> text !== 0 ? text : null,\r\n            //         },\r\n            //     ]\r\n            // },\r\n            // {\r\n            //     title:<Tooltip title=\"蜘蛛3上墙\">\r\n            //         <span>蛛网裹体<QuestionCircleOutlined /></span>\r\n            //     </Tooltip>,\r\n            //     children: [\r\n            //         {\r\n            //             title:<Tooltip title={`时间计算方式为上墙debuff时间+${globalConstants.WEB_WRAP_RUN}秒跑路时间`}>\r\n            //                 <span>时间<QuestionCircleOutlined /></span>\r\n            //             </Tooltip>,\r\n            //             dataIndex: 'webWrapTime',\r\n            //         },\r\n            //         {\r\n            //             title: '上墙补偿',\r\n            //             dataIndex: 'webDmg',\r\n            //         },\r\n            //\r\n            //     ]\r\n            // },\r\n            // {\r\n            //     title:<Tooltip title=\"传送时间无法自动获取\">\r\n            //         <span>跳舞男传送<QuestionCircleOutlined /></span>\r\n            //     </Tooltip>,\r\n            //     children: [\r\n            //         {\r\n            //             title: '补分',\r\n            //             dataIndex: ['manual','tel'],\r\n            //             render: (text, record) => <Input value={this.state.manual.tel} onBlur={(e)=>this.handleManualChange(e, record, 'tel')} style={{maxWidth: 85}}/>\r\n            //         },\r\n            //\r\n            //     ]\r\n            // },\r\n            {\r\n                title: '大蓝',\r\n                dataIndex: 'manaPotionCasts',\r\n                sorter: (a, b) => a.manaPotionCasts-b.manaPotionCasts,\r\n            },\r\n            {\r\n                title: '符文',\r\n                dataIndex: 'runesCasts',\r\n                sorter: (a, b) => a.runesCasts-b.runesCasts,\r\n            },\r\n            {\r\n                title: '其他补/扣分',\r\n                dataIndex: ['manual','other'],\r\n                render: (text, record) => <Input value={this.state.manual.other} onBlur={(e)=>this.handleManualChange(e, record, 'other')} style={{maxWidth: 100}}/>\r\n            },\r\n            {\r\n                title: '总分',\r\n                dataIndex: 'finalDamage',\r\n                sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n                defaultSortOrder: 'descend',\r\n            },\r\n            {\r\n                title: '百分比',\r\n                dataIndex: 'finalScore',\r\n            },\r\n        ]\r\n        return (\r\n            <Card title={<Row type=\"flex\" gutter={16}>\r\n                <Col>\r\n                    <Switch\r\n                        checked={tactical}\r\n                        onChange={(checked)=>this.setState({tactical: checked})}\r\n                        checkedChildren=\"战术动作\"\r\n                        unCheckedChildren=\"伤害统计\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Input\r\n                        style={{width: 400}}\r\n                        placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\r\n                        onChange={event => this.setState({report: event.target.value})}/>\r\n                </Col>\r\n                <Col>\r\n                    <Button onClick={this.submit}>提交</Button>\r\n                </Col>\r\n                {!tactical && <Col><Button onClick={this.downloadExcel}>生成下载链接</Button></Col>}\r\n                {excelDataSource &&  <Col><ExcelFile element={<Button>下载</Button>}>\r\n                    <ExcelSheet data={excelDataSource} name=\"原始数据\">\r\n                        <ExcelColumn label=\"mark\" value=\"mark\"/>\r\n                        <ExcelColumn label=\"BattleID\" value=\"BattleID\"/>\r\n                        <ExcelColumn label=\"BattleName\" value=\"BattleName\"/>\r\n                        <ExcelColumn label=\"StartTime\" value=\"StartTime\"/>\r\n                        <ExcelColumn label=\"EndTime\" value=\"EndTime\"/>\r\n                        <ExcelColumn label=\"class\" value=\"class\"/>\r\n                        <ExcelColumn label=\"name\" value=\"name\"/>\r\n                        <ExcelColumn label=\"damage-done\" value=\"damageDone\"/>\r\n                        <ExcelColumn label=\"healing\" value=\"healing\"/>\r\n                    </ExcelSheet>\r\n                </ExcelFile>\r\n                </Col>}\r\n            </Row>}>\r\n                {tactical ?\r\n                    <TacticalTable\r\n                        loading={loading}\r\n                        tactics={tactics}\r\n                    /> :\r\n                    <Table\r\n                        rowClassName={record => record.type}\r\n                        size=\"small\"\r\n                        loading={loading}\r\n                        dataSource={dataSource}\r\n                        columns={columns}\r\n                        rowKey='id'\r\n                        pagination={false}\r\n                    />\r\n                }\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state=>state.report) (DashboardPage)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashSundarCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}&filter=ability.id%3D11597%20AND%20NOT%20IN%20RANGE%20FROM%20type%20%3D%20%22applydebuffstack%22%20AND%20ability.id%20%3D%2011597%20AND%20stack%20%3D%205%20TO%20type%3D%22removedebuff%22%20AND%20ability.id%3D11597%20GROUP%20BY%20target%20ON%20target%20END&by=source`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFightSummary (reportID, start, end) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/summary/${reportID}?api_key=${globalConstants.API_KEY}&start=${start}&end=${end}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId, enemy= false) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&hostility=${enemy?1:0}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbilityAndTime (reportID, abilityId, start, end) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&start=${start}&end=${end}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbilityAndEncounter (reportID, abilityId, encounterID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&encounter=${encounterID}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbilityAndEncounter (reportID, abilityId, encounterID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&encounter=${encounterID}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndEncounter (reportID, abilityId, encounterID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&encounter=${encounterID}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getFightSummary,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget,\r\n    getCastsByAbility,\r\n    getBuffsByAbility,\r\n    getBuffsByAbilityAndTime,\r\n    getBuffsByAbilityAndEncounter,\r\n    getCastsByAbilityAndEncounter,\r\n    getDamageDoneByAbilityAndEncounter,\r\n    getBOSSTrashSundarCast\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        filteredBossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        chainDebuff: null,\r\n        webWrapDebuff: null,\r\n        rogueSunderDebuff: null,\r\n        viscidusBanned: null,\r\n        hunterAura: null,\r\n        manaPotion: null,\r\n        runes: null,\r\n        swiftBoot: null,\r\n        stopWatch: null,\r\n        fightsData: null,\r\n        tactics: null,\r\n        thaddiusTactics: null,\r\n        slimeTactics: null,\r\n        fourTactics: null,\r\n        spiderTactics: null,\r\n        kelParry: null,\r\n        bossTrashLess5SunderCasts:null\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRogueSunderDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.SUNDERDEBUFFID, true)\r\n            const validIds= [...globalConstants.TRASHIDS, ...globalConstants.BOSSIDS].filter(x=>!globalConstants.REMOVEBOSSIDS.includes(x))\r\n            actions.report.save({\r\n                rogueSunderDebuff: result.data?.auras?.filter(aura=>validIds.includes(aura.guid)).reduce((sum,i)=>sum+Number(i.totalUses),0)\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds, removedBossIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n            let newPromises = []\r\n            removedBossIds.map(trashId=> {\r\n                newPromises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(newPromises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExcludedBossDmg({reportId, removedBossIds}){\r\n            let result = actions.report.getS().report.filteredBossDmg\r\n            let promises = []\r\n            removedBossIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        filteredBossDmg: result\r\n                    })\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        res.rogueSunder = !!trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲')\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBossTrashLess5SunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashSundarCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.less5sunder = res.less5sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.less5sunder =  Number.isInteger(newCast) ? res.less5sunder + newCast : res.less5sunder\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashLess5SunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries,\r\n                filteredBossDmg: result.data.entries,\r\n                tactics: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n\r\n        async getFightsData(reportId){\r\n            let report = actions.report.getS().report\r\n            let {fight} = report\r\n            const {fights} = fight\r\n            const fightsPromises = fights.map(async fight=> {\r\n                const fightsSummary = await service.getFightSummary(reportId, fight.start_time, fight.end_time)\r\n                let record = {\r\n                    BattleID: fight.id,\r\n                    BattleName: fight.name,\r\n                    StartTime: fight.start_time,\r\n                    EndTime: fight.end_time,\r\n                    BossID: fight.boss\r\n                }\r\n                return fightsSummary.data?.composition?.filter(player=>(player.type === 'Warrior' || player.type === 'Rogue')).map(player=>{\r\n                    let fightDetail = {\r\n                        ...record,\r\n                        name: player.name,\r\n                        class: player.type,\r\n                        mark: record.BattleID+player.name,\r\n                        damageDone: fightsSummary.data?.damageDone?.find(record=>record.id===player.id)?.total || 0,\r\n                        healing: fightsSummary.data?.healingDone?.find(record=>record.id===player.id)?.total || 0,\r\n                    }\r\n                    // if (fightDetail.BossID === globalConstants.MAEXXNA_ENCOUNTER_ID){\r\n                    //     const debuffDmg = webWrapDebuff.find(debuff=>debuff.id===player.id)?.debuffDmg\r\n                    //     fightDetail.damageDone = debuffDmg ? fightDetail.damageDone + debuffDmg : fightDetail.damageDone\r\n                    // }\r\n                    // if (fightDetail.BossID === globalConstants.KEL_ENCOUNTER_ID){\r\n                    //     // const debuffDmg = chainDebuff.find(debuff=>debuff.id===player.id)?.debuffDmg\r\n                    //     // fightDetail.damageDone = debuffDmg ? fightDetail.damageDone + debuffDmg : fightDetail.damageDone\r\n                    //     const parryDmg = kelParry.find(parry=>parry.id===player.id)?.kelParryDmg\r\n                    //     fightDetail.damageDone = parryDmg ? fightDetail.damageDone + parryDmg : fightDetail.damageDone\r\n                    // }\r\n                    return (fightDetail)\r\n                })\r\n            })\r\n            Promise.all(fightsPromises).then(trashRecords=> {\r\n                const fightsData = trashRecords.reduce((sum, trashRecord) => sum.concat(trashRecord), [])\r\n                actions.report.save({\r\n                    fightsData: fightsData\r\n                })}\r\n            )\r\n\r\n        },\r\n\r\n        async getManaPotion(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.MANA_POTIONID)\r\n            actions.report.save({\r\n                manaPotion: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getStopWatch(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.STOPWATCH_ID)\r\n            actions.report.save({\r\n                stopWatch: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getSwiftBoot(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.SWIFT_BOOT_ID)\r\n            actions.report.save({\r\n                swiftBoot: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRunes(reportId){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DARK_RUNEID))\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DEMON_RUNEID))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.runes = res.runes || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.runes =  Number.isInteger(newCast) ? res.runes + newCast : res.runes\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        runes: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getHunterbuff(reportId){\r\n            const result = await service.getBuffsByAbility(reportId, globalConstants.HUNTERAURA)\r\n            actions.report.save({\r\n                hunterAura: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getSlime({reportId, slimeID}){\r\n            let result = actions.report.getS().report.tactics\r\n            //小软的致密伤害\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.DENSE_BOMB, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.dense1 =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            //小软的帽子伤害\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.HAT, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.hat =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            // 瘟疫1滋补\r\n            const nothCurse = await service.getDebuffsByAbility(reportId, globalConstants.NOTH_CURSE_ID)\r\n            service.getBuffsByAbilityAndEncounter(reportId, globalConstants.RESTO, globalConstants.NOTH_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const hasDebuff = nothCurse.data.auras.find(i=>i.id===entry.id)\r\n                    const hasRes = record.data.auras.find(i=>i.id===entry.id)?.totalUptime > 5000\r\n                    res.resto =  hasDebuff && !hasRes\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            //跳舞男迅捷鞋\r\n            service.getCastsByAbilityAndEncounter(reportId, 0, globalConstants.HEIGAN_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.gear.find(i=>i.id===globalConstants.SWIFT_BOOT_ITEM_ID)? 1 :0\r\n                    res.swiftBoot =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getThaddius(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            //电男死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            //电男冲动\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            //孢子死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            //孢子冲动\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async get4DK(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            const fight =  actions.report.getS().report.fight\r\n            const start = fight.fights.find(record=>record.boss===1113).end_time\r\n            const end = fight.fights.find(record=>record.boss===1109).start_time\r\n            service.getBuffsByAbilityAndTime(reportId, globalConstants.STONESHIELD, start, end).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.stoneShield =  record.data.auras?.find(i=>i.id===entry.id)\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 冲动\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 鲁莽\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RECKLESSNESS, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 剑舞\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.BLADEFLURRY, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 暗抗\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DARKRES, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.darkres =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getSpider({reportId, interruptID}){\r\n            let result = actions.report.getS().report.tactics\r\n            //蜘蛛群自然抗吸收\r\n            service.getDamageTakenByAbility(reportId, globalConstants.NATUREDMG1).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.natureres = res.natureres || false\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails.length>0 ?\r\n                        record.data.entries.find(i=>i.id===entry.id).hitdetails.find(hitdetail=> hitdetail.type==='Absorb'\r\n                            || hitdetail.type==='Tick Absorb' || hitdetail.type==='Resist' || hitdetail.type==='Hit' && hitdetail.absorbOrOverheal>0) : true\r\n                    res.natureres =  absorb || res.natureres\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getDamageTakenByAbility(reportId, globalConstants.NATUREDMG2).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.natureres = res.natureres || false\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails.length>0 ?\r\n                        record.data.entries.find(i=>i.id===entry.id).hitdetails.find(hitdetail=> hitdetail.type==='Absorb'\r\n                            || hitdetail.type==='Tick Absorb' || hitdetail.type==='Resist' || hitdetail.type==='Hit' && hitdetail.absorbOrOverheal>0) : true\r\n                    res.natureres =  absorb || res.natureres\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            // 侍僧地精工兵\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.SAPPER, interruptID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.sapper = res.sapper || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.sapper =  Number.isInteger(newCast) ? res.sapper + newCast : res.sapper\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            //一波流吸收\r\n            service.getDamageTakenByAbility(reportId, globalConstants.SHADOW_BRUST).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.darkAbsorb = true\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails.length>0 ?\r\n                        record.data.entries.find(i=>i.id===entry.id).hitdetails.find(hitdetail=> hitdetail.type==='Absorb'\r\n                            || hitdetail.type==='Tick Absorb' || hitdetail.type==='Resist' || hitdetail.type==='Tick' && hitdetail.absorbOrOverheal>0) : true\r\n                    res.darkAbsorb =  absorb\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            // 火箭鞋打蜘蛛1\r\n            service.getCastsByAbilityAndEncounter(reportId, 0, globalConstants.ANUB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.gear.find(i=>i.id===globalConstants.ROCKET_BOOT_ITEM_ID)? 1 :0\r\n                    res.rocketBoot =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            //冰龙的暗抗\r\n            service.getDamageTakenByAbility(reportId, globalConstants.LIFE_STEAL_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.darkres2 =  true\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails.length>0 ?\r\n                        record.data.entries.find(i=>i.id===entry.id).hitdetails.find(hitdetail=> hitdetail.type==='Absorb'\r\n                            || hitdetail.type==='Tick Absorb' || hitdetail.type==='Resist' || hitdetail.type==='Tick' && hitdetail.absorbOrOverheal>0) : true\r\n                    res.darkres2 =  absorb\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            //冰龙死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.SAPPHIRON_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish4 = res.deathwish4 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish4 =  Number.isInteger(newCast) ? res.deathwish4 + newCast : res.deathwish4\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            // 老克打断\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.PUMMEL, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.SHIELDBASH, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.KICK, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            //老克冰抗\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.ICERES, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.iceres =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getChainDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.CHAINID)\r\n            const damage = await service.getDamageDoneByAbilityAndEncounter(reportId, 0, globalConstants.KEL_ENCOUNTER_ID)\r\n            const bossFight = actions.report.getS().report.fight.fights.find(fight=>fight.boss===globalConstants.KEL_ENCOUNTER_ID)\r\n            const bossTime = bossFight.end_time-bossFight.start_time\r\n            const chainDebuff = result.data.auras.map(debuff=>{\r\n                const playerDMG = damage.data.entries?.find(dmg=> debuff.id === dmg.id)?.total\r\n                const avg = playerDMG/(bossTime-debuff.totalUptime)\r\n                const debuffDmg = Math.floor(avg*debuff.totalUptime)\r\n                return {...debuff, debuffDmg}\r\n            })\r\n            actions.report.save({\r\n                chainDebuff\r\n            })\r\n        },\r\n\r\n        async getWebWrapDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.WEBWRAPID)\r\n            const damage = await service.getDamageDoneByAbilityAndEncounter(reportId, 0, globalConstants.MAEXXNA_ENCOUNTER_ID)\r\n            const bossFight = actions.report.getS().report.fight.fights.find(fight=>fight.boss===globalConstants.MAEXXNA_ENCOUNTER_ID)\r\n            const bossTime = bossFight.end_time-bossFight.start_time\r\n            const webWrapDebuff = result.data.auras.map(debuff=>{\r\n                const totalUptime = debuff.totalUptime + globalConstants.WEB_WRAP_RUN * debuff.bands.length * 1000\r\n                const playerDMG = damage.data.entries?.find(dmg=> debuff.id === dmg.id)?.total\r\n                const avg = playerDMG/(bossTime-totalUptime)\r\n                const debuffDmg = Math.floor(avg* totalUptime)\r\n                return {...debuff, debuffDmg, totalUptime}\r\n            })\r\n            actions.report.save({\r\n                webWrapDebuff\r\n            })\r\n        },\r\n\r\n        async getKelParry({reportId, kelID}) {\r\n            const {BS1_ID, BS4_ID, MELEE_ID, WW_ID, EX_ID, HS_ID} = globalConstants\r\n            let abilities = [BS1_ID, BS4_ID, MELEE_ID, WW_ID, EX_ID, HS_ID]\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            abilities.map((abilityID)=> promises.push(service.getDamageDoneByAbilityAndTarget(reportId, abilityID, kelID)))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    const isMelee = trashRecord.data.entries.find(i=>i.type==='Warrior') && trashRecord.data.entries.find(i=>i.type==='Rogue')\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.kelParryDmg = res.kelParryDmg || 0\r\n                        const player = trashRecord.data.entries.find(i=>i.id===entry.id)\r\n                        const avgDmg = player?.hitCount ? player?.total/player?.hitCount : 0\r\n                        const parryCount = avgDmg && player?.missdetails.find(detail=>detail.type==='Parry')?.count\r\n                        const cpDmg = parryCount && Math.floor(avgDmg * parryCount * (player.type==='Warrior' && isMelee ? 2: 1))\r\n                        res.kelParryDmg = Number.isInteger(cpDmg) ? res.kelParryDmg + cpDmg : res.kelParryDmg\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        kelParry: result\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}