{"version":3,"sources":["globalConstants.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","API_KEY","BASE_URL","ENDTIME","TRASHIDS","EXCLUDEIDS","REMOVEBOSSIDS","BOSSIDS","HUNTERAURA","CHAINID","WEBWRAPID","EXECUTEID","BLOODTHIRSTID","SHOTID","VISCIDUSID","VEKNISSID","VEKNISS_THRESHOLD","MANA_POTIONID","SWIFT_BOOT_ID","STOPWATCH_ID","DARK_RUNEID","DEMON_RUNEID","DashboardPage","props","submit","promises","setState","loading","push","actions","report","getBOSSDmg","state","getFight","Promise","all","then","trashIds","findTargetIds","fight","filteredBossIds","filter","v","includes","removedBossIds","getBossTrashDmg","reportId","getExcludedBossDmg","getManaPotion","getChainDebuff","getWebWrapDebuff","getRunes","getHunterbuff","getBossTrashSunderCasts","concat","enemies","map","enemy","guid","id","calculateBossTime","sum","fights","record","boss","end_time","start_time","calculatedSunderAvg","sunderCasts","sumWithoutTop4","i","sunder","sort","a","b","slice","reduce","item","furyWarriorCounts","type","length","Math","floor","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","manaPotion","runes","filteredBossDmg","hunterAura","chainDebuff","webWrapDebuff","finalDmgMax","sunderBase","source","entry","trashDmg","find","trashEntry","total","filteredBossDmgData","sunderPenalty","manual","value","manaPotionCasts","runesCasts","chainTime","round","totalUptime","webWrapTime","hunterAuraPenalty","totalUses","finalDamage","Number","name","finalScore","toFixed","handleManualChange","e","newManual","target","this","dataSource","columns","title","dataIndex","filters","text","onFilter","sorter","QuestionCircleOutlined","render","onBlur","style","maxWidth","defaultSortOrder","width","placeholder","onChange","event","onClick","rowClassName","size","rowKey","pagination","Component","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","data","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","getCastsByAbility","getBuffsByAbility","initialState","dmg","poisonDmgTaken","viscidusMeleeFrost","viscidusBanned","swiftBoot","stopWatch","reducers","save","effects","getS","getState","getDmg","service","result","entries","getPoisonDmgTaken","POISONID","auras","trashId","trashRecords","trashRecord","res","_","cloneDeep","newDmg","isInteger","newPromises","newCast","abilities","ability","getViscidusBanned","viscidusId","banned","hitCount","getViscidusCasts","viscidusCasts","getViscidusFrosts","OILFROSTID","WEAPONFROSTID","meleeFrost","getStopWatch","getSwiftBoot","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af7f997d.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: '8973e2f9f9412a72ff5f0aa377e1f391',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*12,  //12 Hours\r\n    TRASHIDS: [16778, 16449, 16505, 15981, 15979, 16025, 16193, 16154, 16375, 15976, 16400, 16243, 16156, 16861, 15975, 16290, 16474, 16164,\r\n        16506, 16573, 16168, 16020, 16022, 15977, 16163, 16984, 51179550, 16165, 16194, 16145, 16146, 16017, 16775, 16447, 16158, 16363,\r\n        16776, 16129, 15980, 16290, 16453, 16021, 16029, 16024, 16157, 16137, 15974, 16018, 17055, 16446, 16244, 16486, 16215, 15978,\r\n        16368, 16216, 16067],\r\n    EXCLUDEIDS: [15928, 15929, 15930, 16011, 16063, 16062, 16064, 16065, 16060, 16428, 16429, 16427, 16441, 16803, 16124, 16125, 16126,\r\n        16127, 16149, 16148, 16150, 16297, 16036, 16037, 16034, 16236, 16360, 16068, 14881, 16030, 16286, 4075, 16998],\r\n    REMOVEBOSSIDS: [15928, 15929, 15930, 16011, 16060, 16063, 16062, 16064, 16065],\r\n    BOSSIDS:[15990,15928, 16062, 16065, 16028, 16064, 16060, 16061, 15929, 15932, 15931, 16011, 16063, 15954, 15936, 15989, 15930, 15952, 15956, 15953],\r\n    HUNTERAURA: 20906,\r\n    CHAINID: 28410,\r\n    WEBWRAPID:28622,\r\n    EXECUTEID: 20647,\r\n    BLOODTHIRSTID: 23894,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n    MANA_POTIONID: 17531,\r\n    SWIFT_BOOT_ID: 9175,\r\n    STOPWATCH_ID: 14530,\r\n    DARK_RUNEID: 27869,\r\n    DEMON_RUNEID: 16666,\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Button, Input, Table, Card, Tooltip} from 'antd'\r\nimport {QuestionCircleOutlined} from '@ant-design/icons'\r\nimport {actions, connect} from 'mirrorx'\r\nimport {globalConstants} from './globalConstants'\r\nimport './index.css'\r\n\r\nconst mapStateToProps = state => ({\r\n    bossDmg: state.report.bossDmg,\r\n    filteredBossDmg: state.report.filteredBossDmg,\r\n    fight: state.report.fight,\r\n    bossTrashDmg: state.report.bossTrashDmg,\r\n    bossTrashSunderCasts: state.report.bossTrashSunderCasts,\r\n    webWrapDebuff: state.report.webWrapDebuff,\r\n    chainDebuff: state.report.chainDebuff,\r\n    manaPotion: state.report.manaPotion,\r\n    runes: state.report.runes,\r\n    hunterAura: state.report.hunterAura,\r\n})\r\n\r\nclass DashboardPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            report: null,\r\n            loading: false,\r\n            manual: [],\r\n        }\r\n    }\r\n\r\n    submit = () => {\r\n        let promises = []\r\n        this.setState({loading: true})\r\n\r\n        promises.push(actions.report.getBOSSDmg(this.state.report))\r\n        promises.push(actions.report.getFight(this.state.report))\r\n        Promise.all(promises).then(()=>{\r\n            promises = []\r\n            const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\r\n            const filteredBossIds = this.findTargetIds(globalConstants.BOSSIDS.filter(v => !globalConstants.REMOVEBOSSIDS.includes(v)), this.props.fight)\r\n            const removedBossIds = this.findTargetIds(globalConstants.REMOVEBOSSIDS, this.props.fight)\r\n            promises.push(actions.report.getBossTrashDmg({trashIds, reportId: this.state.report, removedBossIds}))\r\n            promises.push(actions.report.getExcludedBossDmg({removedBossIds, reportId: this.state.report}))\r\n            promises.push(actions.report.getManaPotion(this.state.report))\r\n            promises.push(actions.report.getChainDebuff(this.state.report))\r\n            promises.push(actions.report.getWebWrapDebuff(this.state.report))\r\n            promises.push(actions.report.getRunes(this.state.report))\r\n            promises.push(actions.report.getHunterbuff(this.state.report))\r\n            promises.push(actions.report.getBossTrashSunderCasts({\r\n                trashIds: trashIds.concat(filteredBossIds),\r\n                reportId: this.state.report}))\r\n            Promise.all(promises).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n        })\r\n    }\r\n\r\n    findTargetIds = (trashIds, fight) => {\r\n        const enemies = fight?.enemies\r\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\r\n    }\r\n\r\n    calculateBossTime = (fight) => {\r\n        let sum = 0\r\n        fight&&fight.fights.filter(record=>record.boss!==0).map(record=>{\r\n            sum+=record.end_time-record.start_time\r\n        })\r\n        return sum/1000\r\n    }\r\n\r\n    calculatedSunderAvg = (sunderCasts) => {\r\n        let sumWithoutTop4 = sunderCasts?.map(i=>i.sunder).sort((a,b)=>b-a).slice(4).reduce((sum, item)=>sum+item)\r\n        let furyWarriorCounts = sunderCasts?.filter(item=> item.type ==='Warrior')?.length\r\n        return Math.floor(sumWithoutTop4/(furyWarriorCounts-4)*0.7)\r\n    }\r\n\r\n    generateSource = () => {\r\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, manaPotion, runes, filteredBossDmg, hunterAura, chainDebuff, webWrapDebuff} = this.props\r\n        let finalDmgMax = {}\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        let source = bossDmg?.map(entry=>{\r\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const filteredBossDmgData = filteredBossDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const sunderCasts = bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder\r\n            const sunderPenalty = sunderCasts < sunderBase && entry.type==='Warrior' ? Math.floor(-0.05 * trashDmg) : 0\r\n            const manual = this.state.manual.find(trashEntry=>trashEntry.id===entry.id)?.value || 0\r\n            const manaPotionCasts = manaPotion?.find(trashEntry=>trashEntry.id===entry.id)?.total || 0\r\n            const runesCasts = runes?.find(trashEntry=>trashEntry.id===entry.id)?.runes\r\n            const chainTime = Math.round(chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const webWrapTime = Math.round(webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const hunterAuraStatus = hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUses>12 || hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime>500000\r\n            const hunterAuraPenalty = hunterAuraStatus && (entry.type==='Warrior'||entry.type==='Rogue') ? Math.floor(-0.015 * trashDmg) : 0\r\n            const finalDamage = Number(trashDmg) + Number(sunderPenalty) + Number(hunterAuraPenalty) + Number (manual)\r\n            finalDmgMax[entry.type] = finalDmgMax[entry.type] > finalDamage ? finalDmgMax[entry.type] : finalDamage\r\n            return {\r\n                id: entry.id,\r\n                name: entry.name,\r\n                type: entry.type,\r\n                bossDmg: entry.total,\r\n                bossTrashDmg: trashDmg,\r\n                sunderCasts,\r\n                manaPotionCasts,\r\n                runesCasts,\r\n                filteredBossDmgData,\r\n                sunderPenalty,\r\n                hunterAuraPenalty,\r\n                finalDamage,\r\n                chainTime,\r\n                webWrapTime\r\n            }\r\n        })\r\n\r\n        source = source?.map(entry=>{\r\n            entry.finalScore = (entry.finalDamage/finalDmgMax[entry.type]).toFixed(2)\r\n            return entry\r\n        })\r\n        return source\r\n    }\r\n\r\n    handleManualChange = (e, record) => {\r\n        const newManual = this.state.manual.find(item=>item.id == record.id) ?\r\n            this.state.manual.map(item=>item.id === record.id ? {...item, value: e.target.value} : item) :\r\n            this.state.manual.concat([{id: record.id, value: e.target.value}])\r\n        this.setState({\r\n            manual: newManual\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const sunderBase = this.calculatedSunderAvg(this.props.bossTrashSunderCasts)\r\n        const dataSource =  this.generateSource()\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: 'Boss伤害',\r\n                dataIndex: 'bossDmg',\r\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"去除DK2, DK3，孢子男，电男的伤害\">\r\n                    <span>有效boss伤害<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'filteredBossDmgData',\r\n            },\r\n            {\r\n                title: '全程有效伤害',\r\n                dataIndex: 'bossTrashDmg',\r\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title={`平均数的70%为: ${sunderBase}`}>\r\n                    <span>战士有效破甲<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderCasts',\r\n                render: (text,record)=> record.type ==='Warrior' ? text : '',\r\n            },\r\n            {\r\n                title: <Tooltip title=\"扣5%有效伤害\">\r\n                    <span>破甲扣除<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"扣1.5%有效伤害\">\r\n                    <span>强击光环扣除<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'hunterAuraPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: '老克心控时间',\r\n                dataIndex: 'chainTime',\r\n            },\r\n            {\r\n                title:<Tooltip title=\"蜘蛛3上墙\">\r\n                    <span>蛛网裹体时间<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'webWrapTime',\r\n            },\r\n            {\r\n                title: '大蓝使用量',\r\n                dataIndex: 'manaPotionCasts',\r\n                sorter: (a, b) => a.manaPotionCasts-b.manaPotionCasts,\r\n            },\r\n            {\r\n                title: '符文使用量',\r\n                dataIndex: 'runesCasts',\r\n                sorter: (a, b) => a.runesCasts-b.runesCasts,\r\n            },\r\n            {\r\n                title: '人工补/扣分',\r\n                dataIndex: 'manual',\r\n                render: (text, record) => <Input value={record.manual} onBlur={(e)=>this.handleManualChange(e, record)} style={{maxWidth: 100}}/>\r\n            },\r\n            {\r\n                title: '总分数',\r\n                dataIndex: 'finalDamage',\r\n                sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n                defaultSortOrder: 'descend',\r\n            },\r\n            {\r\n                title: '总百分比',\r\n                dataIndex: 'finalScore',\r\n            },\r\n        ]\r\n        return (\r\n            <Card title={<div>\r\n                <Input\r\n                    style={{width: 400}}\r\n                    placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\r\n                    onChange={event => this.setState({report: event.target.value})}/>\r\n                <Button onClick={this.submit}>提交</Button>\r\n            </div>}>\r\n                <Table\r\n                    rowClassName={record=>record.type}\r\n                    size=\"small\"\r\n                    loading={this.state.loading}\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                    rowKey='id'\r\n                    pagination={false}\r\n                />\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null) (DashboardPage)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget,\r\n    getCastsByAbility,\r\n    getBuffsByAbility\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        filteredBossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        chainDebuff: null,\r\n        webWrapDebuff: null,\r\n        viscidusMeleeFrost: null,\r\n        viscidusBanned: null,\r\n        hunterAura: null,\r\n        manaPotion: null,\r\n        runes: null,\r\n        swiftBoot: null,\r\n        stopWatch: null,\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n\r\n        async getChainDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.CHAINID)\r\n            actions.report.save({\r\n                chainDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getWebWrapDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.WEBWRAPID)\r\n            actions.report.save({\r\n                webWrapDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds, removedBossIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n            let newPromises = []\r\n            removedBossIds.map(trashId=> {\r\n                newPromises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(newPromises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExcludedBossDmg({reportId, removedBossIds}){\r\n            let result = actions.report.getS().report.filteredBossDmg\r\n            let promises = []\r\n            removedBossIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        filteredBossDmg: result\r\n                    })\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusBanned({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.BLOODTHIRSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.EXECUTEID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.banned = res.banned || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.banned =  Number.isInteger(newCast) ? res.banned + newCast : res.banned\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusBanned: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusCasts({reportId, viscidusId}){\r\n            const result = await service.getBOSSTrashCast(reportId, viscidusId)\r\n            actions.report.save({\r\n                viscidusCasts: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getViscidusFrosts({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.OILFROSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.WEAPONFROSTID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.meleeFrost = res.meleeFrost || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.meleeFrost =  Number.isInteger(newCast) ? res.meleeFrost + newCast : res.meleeFrost\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusMeleeFrost: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries,\r\n                filteredBossDmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            // const enemyData = result.data.enemies.filter(enemy=>!globalConstants.EXCLUDEIDS.includes(enemy.guid) && !globalConstants.BOSSIDS.includes(enemy.guid)).map(enemy=>enemy.guid)\r\n            // console.log(enemyData,'emenydata')\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n\r\n        async getManaPotion(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.MANA_POTIONID)\r\n            actions.report.save({\r\n                manaPotion: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getStopWatch(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.STOPWATCH_ID)\r\n            actions.report.save({\r\n                stopWatch: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getSwiftBoot(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.SWIFT_BOOT_ID)\r\n            actions.report.save({\r\n                swiftBoot: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRunes(reportId){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DARK_RUNEID))\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DEMON_RUNEID))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.runes = res.runes || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.runes =  Number.isInteger(newCast) ? res.runes + newCast : res.runes\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        runes: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getHunterbuff(reportId){\r\n            const result = await service.getBuffsByAbility(reportId, globalConstants.HUNTERAURA)\r\n            actions.report.save({\r\n                hunterAura: result.data.auras\r\n            })\r\n        },\r\n    }\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}