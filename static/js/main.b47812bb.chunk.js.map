{"version":3,"sources":["globalConstants.js","Tactical.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","API_KEY","BASE_URL","ENDTIME","TRASHIDS","EXCLUDEIDS","REMOVEBOSSIDS","BOSSIDS","HUNTERAURA","CHAINID","WEBWRAPID","WEB_WRAP_RUN","SUNDERDEBUFFID","BLOODTHIRSTID","SHOTID","VISCIDUSID","VEKNISSID","VEKNISS_THRESHOLD","MANA_POTIONID","SWIFT_BOOT_ID","STOPWATCH_ID","DARK_RUNEID","DEMON_RUNEID","DENSE_BOMB","SAPPER","HAT","SLIME","DEATHWISH","RECKLESSNESS","BLADEFLURRY","RUSH","PUMMEL","SHIELDBASH","KICK","INTERRUPT1","THADDIUS_ENCOUNTER_ID","LOATHEB_ENCOUNTER_ID","NOTH_CURSE_ID","NOTH_ENCOUNTER_ID","RESTO","DARKRES","ICERES","NATUREDMG1","NATUREDMG2","SHADOW_BRUST","HEIGAN_ENCOUNTER_ID","SWIFT_BOOT_ITEM_ID","ROCKET_BOOT_ITEM_ID","FOUR_ENCOUNTER_ID","MAEXXNA_ENCOUNTER_ID","LIFE_STEAL_ID","ANUB_ENCOUNTER_ID","SAPPHIRON_ENCOUNTER_ID","KEL_ENCOUNTER_ID","KEL_ID","MELEE_ID","BS1_ID","BS4_ID","HS_ID","WW_ID","EX_ID","TacticalTable","dataSource","this","props","tactics","rowClassName","record","type","size","loading","columns","title","dataIndex","filters","text","value","onFilter","children","render","item","resto","darkAbsorb","darkres2","rowKey","pagination","Component","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","DashboardPage","downloadExcel","report","state","setState","promises","push","actions","getBOSSDmg","getFight","Promise","all","then","getFightsData","submit","tactical","slimeID","findTargetIds","fight","interruptID","getSlime","reportId","getThaddius","get4DK","getSpider","trashIds","filteredBossIds","filter","v","includes","removedBossIds","getBossTrashDmg","getExcludedBossDmg","getManaPotion","getRogueSunderDebuff","getChainDebuff","getWebWrapDebuff","getRunes","getHunterbuff","getBossTrashSunderCasts","concat","enemies","map","enemy","guid","id","calculatedSunderAvg","sunderCasts","sumWithoutTop4","i","sunder","sort","a","b","slice","reduce","sum","furyWarriorCounts","length","Math","floor","calculateManualSum","manual","newManual","Object","values","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","manaPotion","runes","filteredBossDmg","hunterAura","chainDebuff","webWrapDebuff","rogueSunderDebuff","kelParry","finalDmgMax","sunderBase","source","entry","trashDmg","find","trashEntry","total","filteredBossDmgData","rogueSunder","sunderPenalty","manaPotionCasts","runesCasts","chainTime","round","totalUptime","chainDmg","debuffDmg","kelParryDmg","webWrapTime","webDmg","hunterAuraPenalty","totalUses","finalDamage","Number","name","finalScore","toFixed","handleManualChange","e","target","mergeTactics","slimeTactics","thaddiusTactics","fourTactics","spiderTactics","_","zipWith","fightsData","excelDataSource","sorter","QuestionCircleOutlined","tel","onBlur","style","maxWidth","other","defaultSortOrder","gutter","checked","onChange","checkedChildren","unCheckedChildren","width","placeholder","event","onClick","element","data","label","Tactical","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getFightSummary","start","end","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","getCastsByAbility","getBuffsByAbility","getCastsByAbilityAndEncounter","encounterID","getDamageDoneByAbilityAndEncounter","initialState","dmg","poisonDmgTaken","viscidusBanned","swiftBoot","stopWatch","reducers","save","effects","getS","getState","getDmg","service","result","entries","getPoisonDmgTaken","POISONID","validIds","x","auras","aura","trashId","trashRecords","trashRecord","res","cloneDeep","newDmg","isInteger","newPromises","newCast","abilities","ability","fights","fightsPromises","start_time","end_time","fightsSummary","BattleID","BattleName","StartTime","EndTime","BossID","boss","composition","player","class","mark","damageDone","healing","healingDone","getStopWatch","getSwiftBoot","dense1","hat","nothCurse","hasDebuff","hasRes","gear","deathwish1","deathwish2","deathwish3","recklessness","darkres","natureres","absorb","hitdetails","hitdetail","sapper","absorbOrOverheal","rocketBoot","deathwish4","interrupt2","hitCount","iceres","damage","bossFight","bossTime","debuff","avg","bands","getKelParry","kelID","abilityID","isMelee","avgDmg","parryCount","missdetails","detail","count","cpDmg","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b47812bb.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: '8973e2f9f9412a72ff5f0aa377e1f391',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*12,  //12 Hours\r\n    TRASHIDS: [16778, 16449, 15981, 15979, 16025, 16193, 16154, 16375, 15976, 16400, 16243, 16156, 16861, 15975, 16290, 16474, 16164,\r\n        16506, 16573, 16168, 16020, 16022, 15977, 16163, 16984, 51179550, 16165, 16194, 16145, 16146, 16017, 16775, 16447, 16158, 16363,\r\n        16776, 16129, 15980, 16290, 16453, 16021, 16029, 16024, 16157, 16137, 15974, 16018, 17055, 16446, 16244, 16486, 16215, 15978,\r\n        16368, 16216, 16067],\r\n    EXCLUDEIDS: [15928, 15929, 16505, 15930, 16011, 16063, 16062, 16064, 16065, 16060, 16428, 16429, 16427, 16441, 16803, 16124, 16125, 16126,\r\n        16127, 16149, 16148, 16150, 16297, 16036, 16037, 16034, 16236, 16360, 16068, 14881, 16030, 16286, 4075, 16998],\r\n    REMOVEBOSSIDS: [15928, 15929, 15930, 16011, 16060, 16063, 16062, 16064, 16065, 15990],\r\n    BOSSIDS:[15990,15928, 16062, 16065, 16028, 16064, 16060, 16061, 15929, 15932, 15931, 16011, 16063, 15954, 15936, 15989, 15930, 15952, 15956, 15953],\r\n    HUNTERAURA: 20906,\r\n    CHAINID: 28410,\r\n    WEBWRAPID:28622,\r\n    WEB_WRAP_RUN: 7, //second\r\n    SUNDERDEBUFFID: 11198,\r\n    BLOODTHIRSTID: 23894,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n    MANA_POTIONID: 17531,\r\n    SWIFT_BOOT_ID: 9175,\r\n    STOPWATCH_ID: 14530,\r\n    DARK_RUNEID: 27869,\r\n    DEMON_RUNEID: 16666,\r\n    DENSE_BOMB: 23063, //致密炸弹\r\n    SAPPER: 13241, //地精工兵\r\n    HAT: 11828, //电磁帽\r\n    SLIME: 16024, //胖子区软泥\r\n    DEATHWISH: 12328, //死愿ID\r\n    RECKLESSNESS: 1719, //鲁莽ID\r\n    BLADEFLURRY: 13877, //乱舞ID\r\n    RUSH: 13750, //冲动ID\r\n    PUMMEL: 6554, //拳击ID\r\n    SHIELDBASH: 1672, //盾击ID\r\n    KICK: 1769, //脚踢ID\r\n    INTERRUPT1: 15987, //侍僧ID\r\n    THADDIUS_ENCOUNTER_ID: 1120, //电男encounterID\r\n    LOATHEB_ENCOUNTER_ID: 1115, //孢子encounterID\r\n    NOTH_CURSE_ID: 29213, //诺斯诅咒ID\r\n    NOTH_ENCOUNTER_ID: 1117, //诺斯encounterID\r\n    RESTO: 11359, //滋补药水\r\n    DARKRES: 17548, //强效暗抗药水\r\n    ICERES: 17544, //强效暗抗药水\r\n    NATUREDMG1: 30043, //小蜘蛛自然伤害1\r\n    NATUREDMG2: 28428, //小蜘蛛自然伤害2\r\n    SHADOW_BRUST: 28447, //侍僧暗影爆发\r\n    HEIGAN_ENCOUNTER_ID: 1112, //希尔盖\r\n    SWIFT_BOOT_ITEM_ID: 7391, //迅捷鞋物品ID\r\n    ROCKET_BOOT_ITEM_ID: 7189, //火箭鞋物品ID\r\n    FOUR_ENCOUNTER_ID: 1121, //4DKencounterID\r\n    MAEXXNA_ENCOUNTER_ID: 1116, //蜘蛛3 ID\r\n    LIFE_STEAL_ID: 28542, //冰龙生命吸取ID\r\n    ANUB_ENCOUNTER_ID: 1107, //蜘蛛1 ID\r\n    SAPPHIRON_ENCOUNTER_ID: 1119, //冰龙ID\r\n    KEL_ENCOUNTER_ID: 1114, //老克ID\r\n    KEL_ID: 15990,\r\n    MELEE_ID: 1,\r\n    BS1_ID:23881,\r\n    BS4_ID:23894,\r\n    HS_ID: 25286,\r\n    WW_ID: 1680,\r\n    EX_ID: 20647,\r\n\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Table} from 'antd'\r\n\r\nclass TacticalTable extends Component{\r\n\r\n    render() {\r\n        const dataSource =  this.props.tactics\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: '构造区',\r\n                children: [\r\n                    {\r\n                        title: '胖子+软泥',\r\n                        children: [\r\n                            {\r\n                                title: '致密伤害',\r\n                                dataIndex: 'dense1',\r\n                            },\r\n                            {\r\n                                title: '帽子伤害',\r\n                                dataIndex: 'hat',\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        title: '电男死愿/冲动',\r\n                        dataIndex: 'deathwish1',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '瘟疫区',\r\n                children: [\r\n                    {\r\n                        title: '诺斯滋补',\r\n                        dataIndex: 'resto',\r\n                        render: (text, item)=> item.resto ? '有诅咒没吃滋补':'没问题'\r\n                    },\r\n                    {\r\n                        title: '跳舞男迅捷鞋',\r\n                        dataIndex: 'swiftBoot',\r\n                    },\r\n                    {\r\n                        title: '孢子死愿/冲动',\r\n                        dataIndex: 'deathwish2',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '4DK',\r\n                children: [\r\n                    {\r\n                        title: '暗抗',\r\n                        dataIndex: 'darkres',\r\n                    },\r\n                    {\r\n                        title: '鲁莽/乱舞',\r\n                        dataIndex: 'recklessness',\r\n                    },\r\n                    {\r\n                        title: '死愿/冲动',\r\n                        dataIndex: 'deathwish3',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '蜘蛛区',\r\n                children: [\r\n                    {\r\n                        title: '蜘蛛1火箭鞋',\r\n                        dataIndex: 'rocketBoot',\r\n                    },\r\n                    {\r\n                        title: '侍僧暗吸',\r\n                        dataIndex: 'darkAbsorb',\r\n                        render: (text, item)=> item.darkAbsorb ? '有':'没有'\r\n                    },\r\n                    {\r\n                        title: '侍僧地精工兵',\r\n                        dataIndex: 'sapper',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '中心区',\r\n                children: [\r\n                    {\r\n                        title: '冰龙暗抗吸收',\r\n                        dataIndex: 'darkres2',\r\n                        render: (text, item)=> !item.darkres2 && '没有'\r\n                    },\r\n                    {\r\n                        title: '冰龙死愿',\r\n                        dataIndex: 'deathwish4',\r\n                    },\r\n                    {\r\n                        title: '老克冰抗',\r\n                        dataIndex: 'iceres',\r\n                    },\r\n                    {\r\n                        title: '老克打断',\r\n                        dataIndex: 'interrupt2',\r\n                    },\r\n                ]\r\n            },\r\n\r\n\r\n            // {\r\n            //     title: '总分',\r\n            //     dataIndex: 'finalDamage',\r\n            //     sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n            //     defaultSortOrder: 'descend',\r\n            // },\r\n            // {\r\n            //     title: '百分比',\r\n            //     dataIndex: 'finalScore',\r\n            // },\r\n        ]\r\n        return (\r\n            <Table\r\n                rowClassName={record=>record.type}\r\n                size=\"small\"\r\n                loading={this.props.loading}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                rowKey='id'\r\n                pagination={false}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TacticalTable\r\n","import React, {Component} from 'react'\r\nimport _ from 'lodash'\r\nimport {Button, Input, Table, Card, Tooltip, Col, Row, Switch} from 'antd'\r\nimport {QuestionCircleOutlined} from '@ant-design/icons'\r\nimport {actions, connect} from 'mirrorx'\r\nimport {globalConstants} from './globalConstants'\r\nimport './index.css'\r\nimport ReactExport from 'react-data-export'\r\nimport TacticalTable from './Tactical'\r\n\r\nconst ExcelFile = ReactExport.ExcelFile\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn\r\n\r\nclass DashboardPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            report: null,\r\n            loading: false,\r\n            manual: [],\r\n            tactical: false\r\n        }\r\n    }\r\n\r\n    downloadExcel = () => {\r\n        const {report} = this.state\r\n        this.setState({loading: true})\r\n        let promises = []\r\n        promises.push(actions.report.getBOSSDmg(report))\r\n        promises.push(actions.report.getFight(report))\r\n        Promise.all(promises).then(()=>{\r\n            actions.report.getFightsData(report).then(()=>{this.setState({loading: false})})\r\n            // const kelID = this.findTargetIds([globalConstants.KEL_ID], this.props.fight)\r\n            // promises = []\r\n            // promises.push(actions.report.getKelParry({reportId: report, kelID}))\r\n            // promises.push(actions.report.getChainDebuff(report))\r\n            // promises.push(actions.report.getWebWrapDebuff(report))\r\n        })\r\n    }\r\n\r\n    submit = () => {\r\n        const {tactical, report} = this.state\r\n        let promises = []\r\n        this.setState({loading: true})\r\n        promises.push(actions.report.getBOSSDmg(this.state.report))\r\n        promises.push(actions.report.getFight(this.state.report))\r\n        Promise.all(promises).then(()=>{\r\n            promises = []\r\n            if (tactical){\r\n                const slimeID = this.findTargetIds([globalConstants.SLIME], this.props.fight)\r\n                const interruptID = this.findTargetIds([globalConstants.INTERRUPT1], this.props.fight)\r\n                promises.push(actions.report.getSlime({reportId: report, slimeID}))\r\n                promises.push(actions.report.getThaddius(report))\r\n                promises.push(actions.report.get4DK(report))\r\n                promises.push(actions.report.getSpider({reportId: report, interruptID}))\r\n            }else {\r\n                const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\r\n                const filteredBossIds = this.findTargetIds(globalConstants.BOSSIDS.filter(v => !globalConstants.REMOVEBOSSIDS.includes(v)), this.props.fight)\r\n                const removedBossIds = this.findTargetIds(globalConstants.REMOVEBOSSIDS, this.props.fight)\r\n                promises.push(actions.report.getBossTrashDmg({trashIds, reportId: report, removedBossIds}))\r\n                promises.push(actions.report.getExcludedBossDmg({removedBossIds, reportId: report}))\r\n                promises.push(actions.report.getManaPotion(report))\r\n                promises.push(actions.report.getRogueSunderDebuff(report))\r\n                promises.push(actions.report.getChainDebuff(report))\r\n                promises.push(actions.report.getWebWrapDebuff(report))\r\n                promises.push(actions.report.getRunes(report))\r\n                promises.push(actions.report.getHunterbuff(report))\r\n                promises.push(actions.report.getBossTrashSunderCasts({\r\n                    trashIds: trashIds.concat(filteredBossIds),\r\n                    reportId: this.state.report}))\r\n            }\r\n            Promise.all(promises).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    findTargetIds = (trashIds, fight) => {\r\n        const enemies = fight?.enemies\r\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\r\n    }\r\n\r\n    calculatedSunderAvg = (sunderCasts) => {\r\n        let sumWithoutTop4 = sunderCasts?.map(i=>i.sunder).sort((a,b)=>b-a).slice(4).reduce((sum, item)=>sum+item)\r\n        let furyWarriorCounts = sunderCasts?.filter(item=> item.type ==='Warrior')?.length\r\n        return Math.floor(sumWithoutTop4/(furyWarriorCounts-4)*0.7)\r\n    }\r\n\r\n    calculateManualSum = (manual) => {\r\n        const newManual = {...manual, id:0}\r\n        return Object.values(newManual)?.reduce((a, b) => a + b, 0)\r\n    }\r\n\r\n    generateSource = () => {\r\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, manaPotion, runes, filteredBossDmg, hunterAura, chainDebuff, webWrapDebuff, rogueSunderDebuff, kelParry} = this.props\r\n        let finalDmgMax = {}\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        let source = bossDmg?.map(entry=>{\r\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const filteredBossDmgData = filteredBossDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const sunderCasts = entry.type === 'Warrior' ? bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder :\r\n                bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.rogueSunder ? rogueSunderDebuff : 0\r\n            const sunderPenalty = entry.type==='Warrior' ? sunderCasts < sunderBase  ? Math.floor(-0.05 * trashDmg) : 0 :\r\n                entry.type==='Rogue' ? sunderCasts * 2200 : 0\r\n            const manual = this.state.manual.find(trashEntry=>trashEntry.id===entry.id) || {}\r\n            const manaPotionCasts = manaPotion?.find(trashEntry=>trashEntry.id===entry.id)?.total || 0\r\n            const runesCasts = runes?.find(trashEntry=>trashEntry.id===entry.id)?.runes\r\n            const chainTime = Math.round(chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const chainDmg = chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.debuffDmg || ''\r\n            const kelParryDmg = kelParry?.find(trashEntry=>trashEntry.id===entry.id)?.kelParryDmg\r\n            const webWrapTime = Math.round(webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const webDmg = webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.debuffDmg || ''\r\n            const hunterAuraStatus = hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUses>12 || hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime>500000\r\n            const hunterAuraPenalty = hunterAuraStatus && (entry.type==='Warrior'||entry.type==='Rogue') ? Math.floor(-0.015 * trashDmg) : 0\r\n            const finalDamage = Number(trashDmg) + Number(sunderPenalty) + Number(hunterAuraPenalty) + Number(chainDmg) + Number(webDmg) + Number(kelParryDmg) + this.calculateManualSum(manual)\r\n            finalDmgMax[entry.type] = finalDmgMax[entry.type] > finalDamage ? finalDmgMax[entry.type] : finalDamage\r\n            return {\r\n                id: entry.id,\r\n                name: entry.name,\r\n                type: entry.type,\r\n                bossDmg: entry.total,\r\n                bossTrashDmg: trashDmg,\r\n                sunderCasts,\r\n                manaPotionCasts,\r\n                runesCasts,\r\n                filteredBossDmgData,\r\n                sunderPenalty,\r\n                hunterAuraPenalty,\r\n                finalDamage,\r\n                chainTime,\r\n                chainDmg,\r\n                webWrapTime,\r\n                webDmg,\r\n                manual,\r\n                kelParryDmg\r\n            }\r\n        })\r\n\r\n        source = source?.map(entry=>{\r\n            entry.finalScore = (entry.finalDamage/finalDmgMax[entry.type]).toFixed(2)\r\n            return entry\r\n        })\r\n        return source\r\n    }\r\n\r\n    handleManualChange = (e, record, type) => {\r\n        const newManual = this.state.manual.find(item=>item.id == record.id) ?\r\n            this.state.manual.map(item=>item.id === record.id ? {...item, [type]: Number(e.target.value)} : item) :\r\n            this.state.manual.concat([{id: record.id, [type]: Number(e.target.value)}])\r\n        this.setState({\r\n            manual: newManual\r\n        })\r\n    }\r\n\r\n    mergeTactics = () => {\r\n        const {slimeTactics, thaddiusTactics, fourTactics, spiderTactics} = this.props\r\n        const tacticsArray = [slimeTactics, thaddiusTactics, fourTactics, spiderTactics]\r\n        return tacticsArray.reduce((sum,item)=>_.zipWith(sum, item, (a,b,)=>({...a,...b})))\r\n    }\r\n\r\n    render() {\r\n        const {fightsData, bossTrashSunderCasts} = this.props\r\n        const tactics = this.mergeTactics()\r\n        const {tactical, loading} = this.state\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        const dataSource =  this.generateSource()\r\n        const excelDataSource = fightsData\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: 'Boss伤害',\r\n                dataIndex: 'bossDmg',\r\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"去除DK2, DK3，孢子男，电男，老克的伤害\">\r\n                    <span>有效boss伤害<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'filteredBossDmgData',\r\n            },\r\n            {\r\n                title: '全程有效伤害',\r\n                dataIndex: 'bossTrashDmg',\r\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"贼的破甲为强破\">\r\n                    <span>有效破甲<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderCasts',\r\n                render: (text,record)=> record.type ==='Warrior' || record.type ==='Rogue' ? text : '',\r\n            },\r\n            {\r\n                title: <Tooltip title={`平均数的70%为: ${sunderBase}，不足的扣5%有效伤害, 贼每个成功的强破补偿2200伤害`}>\r\n                    <span>破甲补/扣分<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"扣1.5%有效伤害\">\r\n                    <span>强击光环扣除<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'hunterAuraPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            // {\r\n            //     title: '老克',\r\n            //     children: [\r\n            //         {\r\n            //             title: '心控时间',\r\n            //             dataIndex: 'chainTime',\r\n            //         },\r\n            //         {\r\n            //             title: '心控补偿',\r\n            //             dataIndex: 'chainDmg',\r\n            //         },\r\n            //         {\r\n            //             title: <Tooltip title=\"对于所有的招架，战士的肉搏伤害按照个人平均值两倍进行补偿；战士技能伤害，贼肉搏伤害按照个人平均值进行补偿\">\r\n            //                 <span>招架补偿<QuestionCircleOutlined /></span>\r\n            //             </Tooltip>,\r\n            //             dataIndex: 'kelParryDmg',\r\n            //             render: text=> text !== 0 ? text : null,\r\n            //         },\r\n            //     ]\r\n            // },\r\n            // {\r\n            //     title:<Tooltip title=\"蜘蛛3上墙\">\r\n            //         <span>蛛网裹体<QuestionCircleOutlined /></span>\r\n            //     </Tooltip>,\r\n            //     children: [\r\n            //         {\r\n            //             title:<Tooltip title={`时间计算方式为上墙debuff时间+${globalConstants.WEB_WRAP_RUN}秒跑路时间`}>\r\n            //                 <span>时间<QuestionCircleOutlined /></span>\r\n            //             </Tooltip>,\r\n            //             dataIndex: 'webWrapTime',\r\n            //         },\r\n            //         {\r\n            //             title: '上墙补偿',\r\n            //             dataIndex: 'webDmg',\r\n            //         },\r\n            //\r\n            //     ]\r\n            // },\r\n            {\r\n                title:<Tooltip title=\"传送时间无法自动获取\">\r\n                    <span>跳舞男传送<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                children: [\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','tel'],\r\n                        render: (text, record) => <Input value={this.state.manual.tel} onBlur={(e)=>this.handleManualChange(e, record, 'tel')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title: '大蓝',\r\n                dataIndex: 'manaPotionCasts',\r\n                sorter: (a, b) => a.manaPotionCasts-b.manaPotionCasts,\r\n            },\r\n            {\r\n                title: '符文',\r\n                dataIndex: 'runesCasts',\r\n                sorter: (a, b) => a.runesCasts-b.runesCasts,\r\n            },\r\n            {\r\n                title: '其他补/扣分',\r\n                dataIndex: ['manual','other'],\r\n                render: (text, record) => <Input value={this.state.manual.other} onBlur={(e)=>this.handleManualChange(e, record, 'other')} style={{maxWidth: 100}}/>\r\n            },\r\n            {\r\n                title: '总分',\r\n                dataIndex: 'finalDamage',\r\n                sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n                defaultSortOrder: 'descend',\r\n            },\r\n            {\r\n                title: '百分比',\r\n                dataIndex: 'finalScore',\r\n            },\r\n        ]\r\n        return (\r\n            <Card title={<Row type=\"flex\" gutter={16}>\r\n                <Col>\r\n                    <Switch\r\n                        checked={tactical}\r\n                        onChange={(checked)=>this.setState({tactical: checked})}\r\n                        checkedChildren=\"战术动作\"\r\n                        unCheckedChildren=\"伤害统计\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Input\r\n                        style={{width: 400}}\r\n                        placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\r\n                        onChange={event => this.setState({report: event.target.value})}/>\r\n                </Col>\r\n                <Col>\r\n                    <Button onClick={this.submit}>提交</Button>\r\n                </Col>\r\n                {!tactical && <Col><Button onClick={this.downloadExcel}>生成下载链接</Button></Col>}\r\n                {excelDataSource &&  <Col><ExcelFile element={<Button>下载</Button>}>\r\n                    <ExcelSheet data={excelDataSource} name=\"原始数据\">\r\n                        <ExcelColumn label=\"mark\" value=\"mark\"/>\r\n                        <ExcelColumn label=\"BattleID\" value=\"BattleID\"/>\r\n                        <ExcelColumn label=\"BattleName\" value=\"BattleName\"/>\r\n                        <ExcelColumn label=\"StartTime\" value=\"StartTime\"/>\r\n                        <ExcelColumn label=\"EndTime\" value=\"EndTime\"/>\r\n                        <ExcelColumn label=\"class\" value=\"class\"/>\r\n                        <ExcelColumn label=\"name\" value=\"name\"/>\r\n                        <ExcelColumn label=\"damage-done\" value=\"damageDone\"/>\r\n                        <ExcelColumn label=\"healing\" value=\"healing\"/>\r\n                    </ExcelSheet>\r\n                </ExcelFile>\r\n                </Col>}\r\n            </Row>}>\r\n                {tactical ?\r\n                    <TacticalTable\r\n                        loading={loading}\r\n                        tactics={tactics}\r\n                    /> :\r\n                    <Table\r\n                        rowClassName={record => record.type}\r\n                        size=\"small\"\r\n                        loading={loading}\r\n                        dataSource={dataSource}\r\n                        columns={columns}\r\n                        rowKey='id'\r\n                        pagination={false}\r\n                    />\r\n                }\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state=>state.report) (DashboardPage)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFightSummary (reportID, start, end) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/summary/${reportID}?api_key=${globalConstants.API_KEY}&start=${start}&end=${end}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId, enemy= false) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&hostility=${enemy?1:0}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbilityAndEncounter (reportID, abilityId, encounterID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&encounter=${encounterID}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndEncounter (reportID, abilityId, encounterID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&encounter=${encounterID}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getFightSummary,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget,\r\n    getCastsByAbility,\r\n    getBuffsByAbility,\r\n    getCastsByAbilityAndEncounter,\r\n    getDamageDoneByAbilityAndEncounter\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        filteredBossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        chainDebuff: null,\r\n        webWrapDebuff: null,\r\n        rogueSunderDebuff: null,\r\n        viscidusBanned: null,\r\n        hunterAura: null,\r\n        manaPotion: null,\r\n        runes: null,\r\n        swiftBoot: null,\r\n        stopWatch: null,\r\n        fightsData: null,\r\n        tactics: null,\r\n        thaddiusTactics: null,\r\n        slimeTactics: null,\r\n        fourTactics: null,\r\n        spiderTactics: null,\r\n        kelParry: null,\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRogueSunderDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.SUNDERDEBUFFID, true)\r\n            const validIds= [...globalConstants.TRASHIDS, ...globalConstants.BOSSIDS].filter(x=>!globalConstants.REMOVEBOSSIDS.includes(x))\r\n            actions.report.save({\r\n                rogueSunderDebuff: result.data?.auras?.filter(aura=>validIds.includes(aura.guid)).reduce((sum,i)=>sum+Number(i.totalUses),0)\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds, removedBossIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n            let newPromises = []\r\n            removedBossIds.map(trashId=> {\r\n                newPromises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(newPromises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExcludedBossDmg({reportId, removedBossIds}){\r\n            let result = actions.report.getS().report.filteredBossDmg\r\n            let promises = []\r\n            removedBossIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        filteredBossDmg: result\r\n                    })\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        res.rogueSunder = !!trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲')\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries,\r\n                filteredBossDmg: result.data.entries,\r\n                tactics: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n\r\n        async getFightsData(reportId){\r\n            let report = actions.report.getS().report\r\n            let {fight, kelParry, webWrapDebuff} = report\r\n            const {fights} = fight\r\n            const fightsPromises = fights.map(async fight=> {\r\n                const fightsSummary = await service.getFightSummary(reportId, fight.start_time, fight.end_time)\r\n                let record = {\r\n                    BattleID: fight.id,\r\n                    BattleName: fight.name,\r\n                    StartTime: fight.start_time,\r\n                    EndTime: fight.end_time,\r\n                    BossID: fight.boss\r\n                }\r\n                return fightsSummary.data?.composition?.filter(player=>(player.type === 'Warrior' || player.type === 'Rogue')).map(player=>{\r\n                    let fightDetail = {\r\n                        ...record,\r\n                        name: player.name,\r\n                        class: player.type,\r\n                        mark: record.BattleID+player.name,\r\n                        damageDone: fightsSummary.data?.damageDone?.find(record=>record.id===player.id)?.total || 0,\r\n                        healing: fightsSummary.data?.healingDone?.find(record=>record.id===player.id)?.total || 0,\r\n                    }\r\n                    // if (fightDetail.BossID === globalConstants.MAEXXNA_ENCOUNTER_ID){\r\n                    //     const debuffDmg = webWrapDebuff.find(debuff=>debuff.id===player.id)?.debuffDmg\r\n                    //     fightDetail.damageDone = debuffDmg ? fightDetail.damageDone + debuffDmg : fightDetail.damageDone\r\n                    // }\r\n                    // if (fightDetail.BossID === globalConstants.KEL_ENCOUNTER_ID){\r\n                    //     // const debuffDmg = chainDebuff.find(debuff=>debuff.id===player.id)?.debuffDmg\r\n                    //     // fightDetail.damageDone = debuffDmg ? fightDetail.damageDone + debuffDmg : fightDetail.damageDone\r\n                    //     const parryDmg = kelParry.find(parry=>parry.id===player.id)?.kelParryDmg\r\n                    //     fightDetail.damageDone = parryDmg ? fightDetail.damageDone + parryDmg : fightDetail.damageDone\r\n                    // }\r\n                    return (fightDetail)\r\n                })\r\n            })\r\n            Promise.all(fightsPromises).then(trashRecords=> {\r\n                const fightsData = trashRecords.reduce((sum, trashRecord) => sum.concat(trashRecord), [])\r\n                actions.report.save({\r\n                    fightsData: fightsData\r\n                })}\r\n            )\r\n\r\n        },\r\n\r\n        async getManaPotion(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.MANA_POTIONID)\r\n            actions.report.save({\r\n                manaPotion: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getStopWatch(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.STOPWATCH_ID)\r\n            actions.report.save({\r\n                stopWatch: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getSwiftBoot(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.SWIFT_BOOT_ID)\r\n            actions.report.save({\r\n                swiftBoot: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRunes(reportId){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DARK_RUNEID))\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DEMON_RUNEID))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.runes = res.runes || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.runes =  Number.isInteger(newCast) ? res.runes + newCast : res.runes\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        runes: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getHunterbuff(reportId){\r\n            const result = await service.getBuffsByAbility(reportId, globalConstants.HUNTERAURA)\r\n            actions.report.save({\r\n                hunterAura: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getSlime({reportId, slimeID}){\r\n            let result = actions.report.getS().report.tactics\r\n            //小软的致密伤害\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.DENSE_BOMB, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.dense1 =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            //小软的帽子伤害\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.HAT, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.hat =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            // 瘟疫1滋补\r\n            const nothCurse = await service.getDebuffsByAbility(reportId, globalConstants.NOTH_CURSE_ID)\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RESTO, globalConstants.NOTH_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const hasDebuff = nothCurse.data.auras.find(i=>i.id===entry.id)\r\n                    const hasRes = record.data.entries.find(i=>i.id===entry.id)\r\n                    res.resto =  hasDebuff && !hasRes\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            //跳舞男迅捷鞋\r\n            service.getCastsByAbilityAndEncounter(reportId, 0, globalConstants.HEIGAN_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.gear.find(i=>i.id===globalConstants.SWIFT_BOOT_ITEM_ID)? 1 :0\r\n                    res.swiftBoot =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getThaddius(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            //电男死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            //电男冲动\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            //孢子死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            //孢子冲动\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async get4DK(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            //4DK 死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 冲动\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 鲁莽\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RECKLESSNESS, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 剑舞\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.BLADEFLURRY, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            //4DK 暗抗\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DARKRES, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.darkres =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getSpider({reportId, interruptID}){\r\n            let result = actions.report.getS().report.tactics\r\n            //蜘蛛群自然抗吸收\r\n            service.getDamageTakenByAbility(reportId, globalConstants.NATUREDMG1).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.natureres = res.natureres || false\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails?.find(hitdetail=>hitdetail.type==='Absorb')\r\n                    res.natureres =  absorb || res.natureres\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getDamageTakenByAbility(reportId, globalConstants.NATUREDMG2).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.natureres = res.natureres || false\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails?.find(hitdetail=>hitdetail.type==='Absorb')\r\n                    res.natureres =  absorb || res.natureres\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            // 侍僧地精工兵\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.SAPPER, interruptID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.sapper = res.sapper || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.sapper =  Number.isInteger(newCast) ? res.sapper + newCast : res.sapper\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            //一波流吸收\r\n            service.getDamageTakenByAbility(reportId, globalConstants.SHADOW_BRUST).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.darkAbsorb = true\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails.length>0 ?\r\n                        record.data.entries.find(i=>i.id===entry.id).hitdetails.find(hitdetail=> hitdetail.type==='Absorb'\r\n                            || hitdetail.type==='Tick Absorb' || hitdetail.type==='Resist' || hitdetail.type==='Tick' && hitdetail.absorbOrOverheal>0) : true\r\n                    res.darkAbsorb =  absorb\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            // 火箭鞋打蜘蛛1\r\n            service.getCastsByAbilityAndEncounter(reportId, 0, globalConstants.ANUB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.gear.find(i=>i.id===globalConstants.ROCKET_BOOT_ITEM_ID)? 1 :0\r\n                    res.rocketBoot =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            //冰龙的暗抗\r\n            service.getDamageTakenByAbility(reportId, globalConstants.LIFE_STEAL_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.darkres2 =  true\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails.length>0 ?\r\n                        record.data.entries.find(i=>i.id===entry.id).hitdetails.find(hitdetail=> hitdetail.type==='Absorb'\r\n                            || hitdetail.type==='Tick Absorb' || hitdetail.type==='Resist' || hitdetail.type==='Tick' && hitdetail.absorbOrOverheal>0) : true\r\n                    res.darkres2 =  absorb\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            //冰龙死愿\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.SAPPHIRON_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish4 = res.deathwish4 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish4 =  Number.isInteger(newCast) ? res.deathwish4 + newCast : res.deathwish4\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            // 老克打断\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.PUMMEL, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.SHIELDBASH, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.KICK, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            //老克冰抗\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.ICERES, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.iceres =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getChainDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.CHAINID)\r\n            const damage = await service.getDamageDoneByAbilityAndEncounter(reportId, 0, globalConstants.KEL_ENCOUNTER_ID)\r\n            const bossFight = actions.report.getS().report.fight.fights.find(fight=>fight.boss===globalConstants.KEL_ENCOUNTER_ID)\r\n            const bossTime = bossFight.end_time-bossFight.start_time\r\n            const chainDebuff = result.data.auras.map(debuff=>{\r\n                const playerDMG = damage.data.entries?.find(dmg=> debuff.id === dmg.id)?.total\r\n                const avg = playerDMG/(bossTime-debuff.totalUptime)\r\n                const debuffDmg = Math.floor(avg*debuff.totalUptime)\r\n                return {...debuff, debuffDmg}\r\n            })\r\n            actions.report.save({\r\n                chainDebuff\r\n            })\r\n        },\r\n\r\n        async getWebWrapDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.WEBWRAPID)\r\n            const damage = await service.getDamageDoneByAbilityAndEncounter(reportId, 0, globalConstants.MAEXXNA_ENCOUNTER_ID)\r\n            const bossFight = actions.report.getS().report.fight.fights.find(fight=>fight.boss===globalConstants.MAEXXNA_ENCOUNTER_ID)\r\n            const bossTime = bossFight.end_time-bossFight.start_time\r\n            const webWrapDebuff = result.data.auras.map(debuff=>{\r\n                const totalUptime = debuff.totalUptime + globalConstants.WEB_WRAP_RUN * debuff.bands.length * 1000\r\n                const playerDMG = damage.data.entries?.find(dmg=> debuff.id === dmg.id)?.total\r\n                const avg = playerDMG/(bossTime-totalUptime)\r\n                const debuffDmg = Math.floor(avg* totalUptime)\r\n                return {...debuff, debuffDmg, totalUptime}\r\n            })\r\n            actions.report.save({\r\n                webWrapDebuff\r\n            })\r\n        },\r\n\r\n        async getKelParry({reportId, kelID}) {\r\n            const {BS1_ID, BS4_ID, MELEE_ID, WW_ID, EX_ID, HS_ID} = globalConstants\r\n            let abilities = [BS1_ID, BS4_ID, MELEE_ID, WW_ID, EX_ID, HS_ID]\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            abilities.map((abilityID)=> promises.push(service.getDamageDoneByAbilityAndTarget(reportId, abilityID, kelID)))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    const isMelee = trashRecord.data.entries.find(i=>i.type==='Warrior') && trashRecord.data.entries.find(i=>i.type==='Rogue')\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.kelParryDmg = res.kelParryDmg || 0\r\n                        const player = trashRecord.data.entries.find(i=>i.id===entry.id)\r\n                        const avgDmg = player?.hitCount ? player?.total/player?.hitCount : 0\r\n                        const parryCount = avgDmg && player?.missdetails.find(detail=>detail.type==='Parry')?.count\r\n                        const cpDmg = parryCount && Math.floor(avgDmg * parryCount * (player.type==='Warrior' && isMelee ? 2: 1))\r\n                        res.kelParryDmg = Number.isInteger(cpDmg) ? res.kelParryDmg + cpDmg : res.kelParryDmg\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        kelParry: result\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}