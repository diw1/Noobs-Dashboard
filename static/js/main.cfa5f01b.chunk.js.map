{"version":3,"sources":["globalConstants.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","DashboardPage","props","submit","promises","setState","loading","push","actions","report","getBOSSDmg","state","getFight","getPoisonDmgTaken","getFearDebuff","getVeknissDebuff","Promise","all","then","trashIds","findTargetIds","fight","bossIds","viscidusId","bossTrashIds","getBossTrashDmg","reportId","getExtraBossDmg","getViscidusCasts","getViscidusFrosts","getViscidusBanned","getManaPotion","getSwiftBoot","getStopWatch","getRunes","getBossTrashSunderCasts","concat","enemies","map","enemy","includes","guid","id","filter","calculateBossTime","sum","fights","record","boss","end_time","start_time","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","poisonDmgTaken","fearDebuff","viscidusCasts","viscidusBanned","viscidusMeleeFrost","veknissDebuff","manaPotion","runes","swiftBoot","stopWatch","bossDmgMax","bossTrashDmgMax","bossTime","source","entry","trashDmg","find","trashEntry","total","sunderCasts","sunder","manaPotionCasts","swiftBootCasts","stopWatchCasts","runesCasts","meleeFrost","banned","poisonTicks","tickCount","fearTime","totalUptime","veknissDetail","bands","band","endTime","startTime","visShots","abilities","ability","name","visEyeShot","type","bossDps","toFixed","bossScore","bossTrashScore","finalScore","parseFloat","dataSource","this","columns","title","dataIndex","filters","text","value","onFilter","sorter","a","b","defaultSortOrder","render","children","item","i","key","length","style","width","placeholder","onChange","event","target","onClick","rowClassName","size","rowKey","pagination","Component","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","data","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","getCastsByAbility","initialState","dmg","reducers","save","effects","getS","getState","getDmg","service","result","entries","auras","trashId","trashRecords","trashRecord","res","_","cloneDeep","newDmg","Number","isInteger","newCast","hitCount","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfa5f01b.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: '8973e2f9f9412a72ff5f0aa377e1f391',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*12,  //3 Hours\r\n    TRASHIDS: [15252,15249,15250,15246,15247,15725,15334,15728,15984,15726,15233,15230,15240,15235,15236,15667,15630,15802,15264,15311,15277,15262,15312],\r\n    EXTRABOSSIDS: [15725,15334,15728,15726,15802,15984],\r\n    BOSSIDS:[15543,15727,15511,15509,15517,15589,15516,15275,15276,15544,15299,15510,15263],\r\n    POISONID: 25991,\r\n    FEARID: 26580,\r\n    WEAPONFROSTID:13439,\r\n    OILFROSTID:205,\r\n    EXECUTEID: 20647,\r\n    BLOODTHIRSTID: 23894,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n    MANA_POTIONID: 17531,\r\n    SWIFT_BOOT_ID: 9175,\r\n    STOPWATCH_ID: 14530,\r\n    DARK_RUNEID: 27869,\r\n    DEMON_RUNEID: 16666,\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Button, Input, Table, Card, Tooltip} from 'antd'\r\nimport {actions, connect} from 'mirrorx'\r\nimport {globalConstants} from './globalConstants'\r\nimport './index.css'\r\n\r\nconst mapStateToProps = state => ({\r\n    bossDmg: state.report.bossDmg,\r\n    fight: state.report.fight,\r\n    bossTrashDmg: state.report.bossTrashDmg,\r\n    bossTrashSunderCasts: state.report.bossTrashSunderCasts,\r\n    poisonDmgTaken: state.report.poisonDmgTaken,\r\n    fearDebuff: state.report.fearDebuff,\r\n    veknissDebuff: state.report.veknissDebuff,\r\n    viscidusCasts: state.report.viscidusCasts,\r\n    viscidusMeleeFrost: state.report.viscidusMeleeFrost,\r\n    viscidusBanned: state.report.viscidusBanned,\r\n    manaPotion: state.report.manaPotion,\r\n    runes: state.report.runes,\r\n    swiftBoot: state.report.swiftBoot,\r\n    stopWatch: state.report.stopWatch,\r\n})\r\n\r\nclass DashboardPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            report: null,\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    submit = () => {\r\n        let promises = []\r\n        this.setState({loading: true})\r\n\r\n        promises.push(actions.report.getBOSSDmg(this.state.report))\r\n        promises.push(actions.report.getFight(this.state.report))\r\n        promises.push(actions.report.getPoisonDmgTaken(this.state.report))\r\n        promises.push(actions.report.getFearDebuff(this.state.report))\r\n        promises.push(actions.report.getVeknissDebuff(this.state.report))\r\n        Promise.all(promises).then(()=>{\r\n            promises = []\r\n            const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\r\n            const bossIds = this.findTargetIds(globalConstants.BOSSIDS, this.props.fight)\r\n            const viscidusId = this.findTargetIds([globalConstants.VISCIDUSID], this.props.fight)\r\n            const bossTrashIds = this.findTargetIds(globalConstants.EXTRABOSSIDS, this.props.fight)\r\n            promises.push(actions.report.getBossTrashDmg({trashIds, reportId: this.state.report}))\r\n            promises.push(actions.report.getExtraBossDmg({bossTrashIds, reportId: this.state.report, viscidusId}))\r\n            promises.push(actions.report.getViscidusCasts({viscidusId, reportId: this.state.report}))\r\n            promises.push(actions.report.getViscidusFrosts({viscidusId, reportId: this.state.report}))\r\n            promises.push(actions.report.getViscidusBanned({viscidusId, reportId: this.state.report}))\r\n            promises.push(actions.report.getManaPotion(this.state.report))\r\n            promises.push(actions.report.getSwiftBoot(this.state.report))\r\n            promises.push(actions.report.getStopWatch(this.state.report))\r\n            promises.push(actions.report.getRunes(this.state.report))\r\n            promises.push(actions.report.getBossTrashSunderCasts({\r\n                trashIds: trashIds.concat(bossIds),\r\n                reportId: this.state.report}))\r\n            Promise.all(promises).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n        })\r\n    }\r\n\r\n    findTargetIds = (trashIds, fight) => {\r\n        const enemies = fight?.enemies\r\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\r\n    }\r\n\r\n    calculateBossTime = (fight) => {\r\n        let sum = 0\r\n        fight&&fight.fights.filter(record=>record.boss!==0).map(record=>{\r\n            sum+=record.end_time-record.start_time\r\n        })\r\n        return sum/1000\r\n    }\r\n\r\n    generateSource = () => {\r\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, poisonDmgTaken, fearDebuff, viscidusCasts, viscidusBanned,\r\n            viscidusMeleeFrost, veknissDebuff, manaPotion, runes, swiftBoot, stopWatch,} = this.props\r\n        let bossDmgMax = {}\r\n        let bossTrashDmgMax = {}\r\n        const bossTime = this.calculateBossTime(this.props.fight)\r\n        let source = bossDmg?.map(entry=>{\r\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const sunderCasts = bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder\r\n            const manaPotionCasts = manaPotion?.find(trashEntry=>trashEntry.id===entry.id)?.total || 0\r\n            const swiftBootCasts = swiftBoot?.find(trashEntry=>trashEntry.id===entry.id)?.total ? '是' : '否'\r\n            const stopWatchCasts = stopWatch?.find(trashEntry=>trashEntry.id===entry.id)?.total ? '是' : '否'\r\n            const runesCasts = runes?.find(trashEntry=>trashEntry.id===entry.id)?.runes\r\n            const meleeFrost = viscidusMeleeFrost?.find(trashEntry=>trashEntry.id===entry.id)?.meleeFrost\r\n            const banned = viscidusBanned?.find(trashEntry=>trashEntry.id===entry.id)?.banned\r\n            const poisonTicks = poisonDmgTaken?.find(trashEntry=>trashEntry.id===entry.id)?.tickCount\r\n            const fearTime = fearDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000 || ''\r\n            const veknissDetail = veknissDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.bands?.map(band=>band.endTime-band.startTime)\r\n            const visShots = viscidusCasts?.find(trashEntry=>trashEntry.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                '射击')?.total || viscidusCasts?.find(trashEntry=>trashEntry.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                '冰霜震击')?.total ||0\r\n            const visEyeShot = viscidusCasts?.find(trashEntry=>trashEntry.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                '冰冻之眼')?.total || 0\r\n            bossDmgMax[entry.type] = bossDmgMax[entry.type] > entry.total ? bossDmgMax[entry.type] : entry.total\r\n            bossTrashDmgMax[entry.type] = bossTrashDmgMax[entry.type] > trashDmg ? bossTrashDmgMax[entry.type] : trashDmg\r\n\r\n            return {\r\n                id: entry.id,\r\n                name: entry.name,\r\n                type: entry.type,\r\n                bossDmg: entry.total,\r\n                bossDps: (entry.total/bossTime).toFixed(2),\r\n                bossTrashDmg: trashDmg,\r\n                stopWatchCasts,\r\n                swiftBootCasts,\r\n                poisonTicks,\r\n                fearTime,\r\n                veknissDetail,\r\n                sunderCasts,\r\n                visShots,\r\n                meleeFrost,\r\n                banned,\r\n                visEyeShot,\r\n                manaPotionCasts,\r\n                runesCasts\r\n            }\r\n        })\r\n\r\n        source = source?.map(entry=>{\r\n            const bossScore =  (entry.bossDmg/bossDmgMax[entry.type]).toFixed(2)\r\n            const bossTrashScore =  (entry.bossTrashDmg/bossTrashDmgMax[entry.type]).toFixed(2)\r\n            entry.bossScore = bossScore\r\n            entry.bossTrashScore = bossTrashScore\r\n            entry.finalScore = ((parseFloat(bossScore)+parseFloat(bossTrashScore))/2) .toFixed(2)\r\n            return entry\r\n        })\r\n        return source\r\n    }\r\n\r\n    render() {\r\n        const dataSource =  this.generateSource()\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: 'Boss伤害',\r\n                dataIndex: 'bossDmg',\r\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\r\n            },\r\n            {\r\n                title: 'Boss DPS',\r\n                dataIndex: 'bossDps',\r\n            },\r\n            {\r\n                title: '全程有效伤害',\r\n                dataIndex: 'bossTrashDmg',\r\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\r\n                defaultSortOrder: 'descend',\r\n            },\r\n            {\r\n                title: '战士有效破甲',\r\n                dataIndex: 'sunderCasts',\r\n                render: (text,record)=> record.type ==='Warrior' ? text : '',\r\n                sorter: (a, b) => a.sunderCasts-b.sunderCasts,\r\n            },\r\n            {\r\n                title: '三宝恐惧时间',\r\n                dataIndex: 'fearTime',\r\n                sorter: (a, b) => a.fearTime-b.fearTime,\r\n            },\r\n            {\r\n                title: '移速道具',\r\n                children:[{\r\n                    title: '灵巧秒表',\r\n                    dataIndex: 'stopWatchCasts',\r\n                },\r\n                {\r\n                    title: '迅捷之鞋',\r\n                    dataIndex: 'swiftBootCasts',\r\n                }]},\r\n            {\r\n                title: '维希度斯',\r\n                children: [{\r\n                    title: '毒箭DOT次数',\r\n                    dataIndex: 'poisonTicks',\r\n                    sorter: (a, b) => a.poisonTicks-b.poisonTicks,\r\n                },\r\n                {\r\n                    title: '近战冰冻次数',\r\n                    dataIndex: 'meleeFrost',\r\n                    sorter: (a, b) => a.meleeFrost-b.meleeFrost,\r\n                },\r\n                {\r\n                    title: '近战对本体嗜血斩杀',\r\n                    dataIndex: 'banned',\r\n                    sorter: (a, b) => a.banned-b.banned,\r\n                },\r\n                {\r\n                    title: '远程魔杖次数',\r\n                    dataIndex: 'visShots',\r\n                    sorter: (a, b) => a.visShots-b.visShots,\r\n                },\r\n                {\r\n                    title: '使用蜥蜴眼',\r\n                    dataIndex: 'visEyeShot',\r\n                    render: text => text=='1' ? '是' : '否'\r\n                },\r\n                ]\r\n            },\r\n            {\r\n                title: '维克尼斯催化大于1.5秒次数',\r\n                dataIndex: 'veknissDetail',\r\n                render: (text, record) => {\r\n                    return <Tooltip title={<div>{record.veknissDetail?.map((item, i) => <div key={i}>{item / 1000}秒</div>)}</div>}>\r\n                        {record.veknissDetail?.filter(record => record > globalConstants.VEKNISS_THRESHOLD).length}\r\n                    </Tooltip>\r\n                }\r\n            },\r\n            {\r\n                title: '大蓝使用量',\r\n                dataIndex: 'manaPotionCasts',\r\n                sorter: (a, b) => a.manaPotionCasts-b.manaPotionCasts,\r\n            },\r\n            {\r\n                title: '符文使用量',\r\n                dataIndex: 'runesCasts',\r\n                sorter: (a, b) => a.runesCasts-b.runesCasts,\r\n            },\r\n            {\r\n                title: 'BOSS分',\r\n                dataIndex: 'bossScore',\r\n            },\r\n            {\r\n                title: '全程分',\r\n                dataIndex: 'bossTrashScore',\r\n            },\r\n            {\r\n                title: '平均分',\r\n                dataIndex: 'finalScore',\r\n                sorter: (a, b) => a.finalScore-b.finalScore,\r\n            },\r\n        ]\r\n        return (\r\n            <Card title={<div>\r\n                <Input\r\n                    style={{width: 400}}\r\n                    placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\r\n                    onChange={event => this.setState({report: event.target.value})}/>\r\n                <Button onClick={this.submit}>提交</Button>\r\n            </div>}>\r\n                <Table\r\n                    rowClassName={record=>record.type}\r\n                    size=\"small\"\r\n                    loading={this.state.loading}\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                    rowKey='id'\r\n                    pagination={false}\r\n                />\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null) (DashboardPage)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget,\r\n    getCastsByAbility\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        fearDebuff: null,\r\n        viscidusCasts: null,\r\n        viscidusMeleeFrost: null,\r\n        viscidusBanned: null,\r\n        veknissDebuff: null,\r\n        manaPotion: null,\r\n        runes: null,\r\n        swiftBoot: null,\r\n        stopWatch: null,\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFearDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.FEARID)\r\n            actions.report.save({\r\n                fearDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getVeknissDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.VEKNISSID)\r\n            actions.report.save({\r\n                veknissDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExtraBossDmg({reportId, bossTrashIds, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            bossTrashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossDmg: result\r\n                    })\r\n                })\r\n            })\r\n            // Remove viscidus damage\r\n            service.getBOSSTrashDmg(reportId, viscidusId).then(trashRecord=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    bossDmg: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusBanned({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.BLOODTHIRSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.EXECUTEID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.banned = res.banned || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.banned =  Number.isInteger(newCast) ? res.banned + newCast : res.banned\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusBanned: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusCasts({reportId, viscidusId}){\r\n            const result = await service.getBOSSTrashCast(reportId, viscidusId)\r\n            actions.report.save({\r\n                viscidusCasts: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getViscidusFrosts({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.OILFROSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.WEAPONFROSTID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.meleeFrost = res.meleeFrost || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.meleeFrost =  Number.isInteger(newCast) ? res.meleeFrost + newCast : res.meleeFrost\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusMeleeFrost: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n\r\n        async getManaPotion(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.MANA_POTIONID)\r\n            actions.report.save({\r\n                manaPotion: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getStopWatch(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.STOPWATCH_ID)\r\n            actions.report.save({\r\n                stopWatch: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getSwiftBoot(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.SWIFT_BOOT_ID)\r\n            actions.report.save({\r\n                swiftBoot: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRunes(reportId){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DARK_RUNEID))\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DEMON_RUNEID))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.runes = res.runes || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.runes =  Number.isInteger(newCast) ? res.runes + newCast : res.runes\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        runes: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n    }\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}