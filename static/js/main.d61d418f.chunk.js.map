{"version":3,"sources":["globalConstants.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","DashboardPage","props","submit","promises","setState","loading","push","actions","report","getBOSSDmg","state","getFight","getPoisonDmgTaken","getFearDebuff","getVeknissDebuff","Promise","all","then","trashIds","findTargetIds","fight","bossIds","viscidusId","bossTrashIds","getBossTrashDmg","reportId","getExtraBossDmg","getViscidusCasts","getViscidusFrosts","getBossTrashSunderCasts","concat","enemies","map","enemy","includes","guid","id","filter","calculateBossTime","sum","fights","record","boss","end_time","start_time","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","poisonDmgTaken","fearDebuff","viscidusCasts","viscidusMeleeFrost","veknissDebuff","bossDmgMax","bossTrashDmgMax","bossTime","source","entry","trashDmg","find","trashEntry","total","sunderCasts","sunder","meleeFrost","poisonTicks","tickCount","fearTime","totalUptime","veknissDetail","bands","band","endTime","startTime","visShots","abilities","ability","name","type","bossDps","toFixed","bossScore","bossTrashScore","finalScore","parseFloat","dataSource","this","columns","title","dataIndex","filters","text","value","onFilter","sorter","a","b","defaultSortOrder","render","children","item","i","key","length","style","width","placeholder","onChange","event","target","onClick","rowClassName","size","rowKey","pagination","Component","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","data","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","initialState","dmg","reducers","save","effects","getS","getState","getDmg","service","result","entries","auras","trashId","trashRecords","trashRecord","res","_","cloneDeep","newDmg","Number","isInteger","newCast","hitCount","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d61d418f.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: 'c4c4e61c72c1734522a811abe6659ec5',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*6,  //3 Hours\r\n    TRASHIDS: [15252,15249,15250,15246,15247,15725,15334,15728,15984,15726,15233,15230,15240,15235,15236,15667,15630,15802,15264,15311,15277,15262,15312],\r\n    EXTRABOSSIDS: [15725,15334,15728,15726,15802,15984,15667],\r\n    BOSSIDS:[15543,15727,15511,15509,15517,15589,15516,15275,15276,15544,15299,15510,15263],\r\n    POISONID: 25991,\r\n    FEARID: 26580,\r\n    WEAPONFROSTID:13439,\r\n    OILFROSTID:205,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n}\r\n","import React, {Component} from 'react'\nimport {Button, Input, Table, Card, Tooltip} from 'antd'\nimport {actions, connect} from 'mirrorx'\nimport {globalConstants} from './globalConstants'\nimport './index.css'\n\nconst mapStateToProps = state => ({\n    bossDmg: state.report.bossDmg,\n    fight: state.report.fight,\n    bossTrashDmg: state.report.bossTrashDmg,\n    bossTrashSunderCasts: state.report.bossTrashSunderCasts,\n    poisonDmgTaken: state.report.poisonDmgTaken,\n    fearDebuff: state.report.fearDebuff,\n    veknissDebuff: state.report.veknissDebuff,\n    viscidusCasts: state.report.viscidusCasts,\n    viscidusMeleeFrost: state.report.viscidusMeleeFrost,\n})\n\nclass DashboardPage extends Component{\n\n    constructor(props) {\n        super(props)\n        this.state={\n            report: null,\n            loading: false\n        }\n    }\n\n    submit = () => {\n        let promises = []\n        this.setState({loading: true})\n\n        promises.push(actions.report.getBOSSDmg(this.state.report))\n        promises.push(actions.report.getFight(this.state.report))\n        promises.push(actions.report.getPoisonDmgTaken(this.state.report))\n        promises.push(actions.report.getFearDebuff(this.state.report))\n        promises.push(actions.report.getVeknissDebuff(this.state.report))\n        Promise.all(promises).then(()=>{\n            promises = []\n            const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\n            const bossIds = this.findTargetIds(globalConstants.BOSSIDS, this.props.fight)\n            const viscidusId = this.findTargetIds([globalConstants.VISCIDUSID], this.props.fight)\n            const bossTrashIds = this.findTargetIds(globalConstants.EXTRABOSSIDS, this.props.fight)\n            promises.push(actions.report.getBossTrashDmg({trashIds, reportId: this.state.report}))\n            promises.push(actions.report.getExtraBossDmg({bossTrashIds, reportId: this.state.report}))\n            promises.push(actions.report.getViscidusCasts({viscidusId, reportId: this.state.report}))\n            promises.push(actions.report.getViscidusFrosts({viscidusId, reportId: this.state.report}))\n            promises.push(actions.report.getBossTrashSunderCasts({\n                trashIds: trashIds.concat(bossIds),\n                reportId: this.state.report}))\n            Promise.all(promises).then(()=>{\n                this.setState({loading: false})\n            })\n        })\n    }\n\n    findTargetIds = (trashIds, fight) => {\n        const enemies = fight?.enemies\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\n    }\n\n    calculateBossTime = (fight) => {\n        let sum = 0\n        fight&&fight.fights.filter(record=>record.boss!==0).map(record=>{\n            sum+=record.end_time-record.start_time\n        })\n        return sum/1000\n    }\n\n    generateSource = () => {\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, poisonDmgTaken, fearDebuff, viscidusCasts, viscidusMeleeFrost, veknissDebuff} = this.props\n        let bossDmgMax = {}\n        let bossTrashDmgMax = {}\n        const bossTime = this.calculateBossTime(this.props.fight)\n        let source = bossDmg?.map(entry=>{\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\n            const sunderCasts = bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder\n            const meleeFrost = viscidusMeleeFrost?.find(trashEntry=>trashEntry.id===entry.id)?.meleeFrost\n            const poisonTicks = poisonDmgTaken?.find(trashEntry=>trashEntry.id===entry.id)?.tickCount\n            const fearTime = fearDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000 || ''\n            const veknissDetail = veknissDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.bands?.map(band=>band.endTime-band.startTime)\n            const visShots = viscidusCasts?.find(trashEntry=>trashEntry.id===entry.id)?.abilities.find(ability=>ability.name===\n                '射击')?.total || 0\n            bossDmgMax[entry.type] = bossDmgMax[entry.type] > entry.total ? bossDmgMax[entry.type] : entry.total\n            bossTrashDmgMax[entry.type] = bossTrashDmgMax[entry.type] > trashDmg ? bossTrashDmgMax[entry.type] : trashDmg\n            return {\n                id: entry.id,\n                name: entry.name,\n                type: entry.type,\n                bossDmg: entry.total,\n                bossDps: (entry.total/bossTime).toFixed(2),\n                bossTrashDmg: trashDmg,\n                poisonTicks,\n                fearTime,\n                veknissDetail,\n                sunderCasts,\n                visShots,\n                meleeFrost\n            }\n        })\n\n        source = source?.map(entry=>{\n            const bossScore =  (entry.bossDmg/bossDmgMax[entry.type]).toFixed(2)\n            const bossTrashScore =  (entry.bossTrashDmg/bossTrashDmgMax[entry.type]).toFixed(2)\n            entry.bossScore = bossScore\n            entry.bossTrashScore = bossTrashScore\n            entry.finalScore = ((parseFloat(bossScore)+parseFloat(bossTrashScore))/2) .toFixed(2)\n            return entry\n        })\n        return source\n    }\n\n    render() {\n        const dataSource =  this.generateSource()\n        const columns = [\n            {\n                title: 'ID',\n                dataIndex: 'name',\n            },\n            {\n                title: '职业',\n                dataIndex: 'type',\n                filters: [\n                    {\n                        text: '战',\n                        value: 'Warrior',\n                    },\n                    {\n                        text: '法',\n                        value: 'Mage',\n                    },\n                    {\n                        text: '术',\n                        value: 'Warlock',\n                    },\n                    {\n                        text: '猎',\n                        value: 'Hunter',\n                    },\n                    {\n                        text: '贼',\n                        value: 'Rogue',\n                    },\n                    {\n                        text: '德',\n                        value: 'Druid',\n                    },\n                    {\n                        text: '牧',\n                        value: 'Priest',\n                    },\n                    {\n                        text: '骑',\n                        value: 'Paladin',\n                    },\n                    {\n                        text: '萨',\n                        value: 'Shaman',\n                    },\n\n                ],\n                onFilter: (value, record) => record.type === value ,\n            },\n            {\n                title: 'Boss伤害',\n                dataIndex: 'bossDmg',\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\n            },\n            {\n                title: 'Boss DPS',\n                dataIndex: 'bossDps',\n            },\n            {\n                title: '全程有效伤害',\n                dataIndex: 'bossTrashDmg',\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\n                defaultSortOrder: 'descend',\n            },\n            {\n                title: '战士有效破甲数量',\n                dataIndex: 'sunderCasts',\n                render: (text,record)=> record.type ==='Warrior' ? text : '',\n                sorter: (a, b) => a.sunderCasts-b.sunderCasts,\n            },\n            {\n                title: '三宝恐惧持续时间',\n                dataIndex: 'fearTime',\n                sorter: (a, b) => a.fearTime-b.fearTime,\n            },\n            {\n                title: '维希度斯',\n                children: [{\n                    title: '毒箭DOT伤害次数',\n                    dataIndex: 'poisonTicks',\n                    sorter: (a, b) => a.poisonTicks-b.poisonTicks,\n                },\n                {\n                    title: '近战冰冻次数',\n                    dataIndex: 'meleeFrost',\n                    sorter: (a, b) => a.meleeFrost-b.meleeFrost,\n                },\n                {\n                    title: '远程魔杖次数',\n                    dataIndex: 'visShots',\n                    sorter: (a, b) => a.visShots-b.visShots,\n                },]\n            },\n            {\n                title: '维克尼斯催化大于1.5秒次数',\n                dataIndex: 'veknissDetail',\n                render: (text, record) => {\n                    return <Tooltip title={<div>{record.veknissDetail?.map((item, i) => <div key={i}>{item / 1000}秒</div>)}</div>}>\n                        {record.veknissDetail?.filter(record => record > globalConstants.VEKNISS_THRESHOLD).length}\n                    </Tooltip>\n                }\n            },\n            {\n                title: 'BOSS分',\n                dataIndex: 'bossScore',\n            },\n            {\n                title: '全程分',\n                dataIndex: 'bossTrashScore',\n            },\n            {\n                title: '平均分',\n                dataIndex: 'finalScore',\n                sorter: (a, b) => a.finalScore-b.finalScore,\n            },\n        ]\n        return (\n            <Card title={<div>\n                <Input\n                    style={{width: 400}}\n                    placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\n                    onChange={event => this.setState({report: event.target.value})}/>\n                <Button onClick={this.submit}>提交</Button>\n            </div>}>\n                <Table\n                    rowClassName={record=>record.type}\n                    size=\"small\"\n                    loading={this.state.loading}\n                    dataSource={dataSource}\n                    columns={columns}\n                    rowKey='id'\n                    pagination={false}\n                />\n            </Card>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, null) (DashboardPage)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        fearDebuff: null,\r\n        viscidusCasts: null,\r\n        viscidusMeleeFrost: null,\r\n        veknissDebuff: null,\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFearDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.FEARID)\r\n            actions.report.save({\r\n                fearDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getVeknissDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.VEKNISSID)\r\n            actions.report.save({\r\n                veknissDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExtraBossDmg({reportId, bossTrashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            bossTrashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusCasts({reportId, viscidusId}){\r\n            const result = await service.getBOSSTrashCast(reportId, viscidusId)\r\n            actions.report.save({\r\n                viscidusCasts: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getViscidusFrosts({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.OILFROSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.WEAPONFROSTID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.meleeFrost = res.meleeFrost || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.meleeFrost =  Number.isInteger(newCast) ? res.meleeFrost + newCast : res.meleeFrost\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusMeleeFrost: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n    }\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}