{"version":3,"sources":["globalConstants.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","DashboardPage","props","submit","promises","setState","loading","push","actions","report","getBOSSDmg","state","getFight","getPoisonDmgTaken","Promise","all","then","trashIds","findTargetIds","fight","bossIds","bossTrashIds","getBossTrashDmg","reportId","getExtraBossDmg","getBossTrashSunderCasts","concat","enemies","map","enemy","includes","guid","id","filter","calculateBossTime","sum","fights","record","boss","end_time","start_time","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","poisonDmgTaken","bossDmgMax","bossTrashDmgMax","bossTime","source","entry","trashDmg","find","trashEntry","total","sunderCasts","sunder","poisonTicks","tickCount","type","name","bossDps","toFixed","bossScore","bossTrashScore","finalScore","parseFloat","dataSource","this","title","style","width","placeholder","onChange","event","target","value","onClick","size","columns","dataIndex","filters","text","onFilter","sorter","a","b","defaultSortOrder","render","rowKey","pagination","Component","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","data","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getDamageTakenByAbility","abilityId","initialState","dmg","reducers","save","effects","getS","getState","getDmg","service","result","entries","trashId","trashRecords","trashRecord","res","_","cloneDeep","newDmg","i","Number","isInteger","newCast","abilities","ability","mirror","model","reportModel","defaults","middlewares","logger","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7c4f602.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: 'c4c4e61c72c1734522a811abe6659ec5',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*6,  //3 Hours\r\n    TRASHIDS: [15252,15249,15250,15246,15247,15725,15334,15728,15984,15726,15233,15230,15240,15235,15236,15667,15630,15802,15264,15311,15277,15262,15312],\r\n    EXTRABOSSIDS: [15725,15334,15728,15726,15802,15984,15667],\r\n    BOSSIDS:[15543,15727,15511,15509,15517,15589,15516,15275,15276,15544,15299,15510,15263],\r\n    POISONID: 25991,\r\n\r\n}\r\n","import React, {Component} from 'react'\nimport {Button, Input, Table, Card} from 'antd'\nimport {actions, connect} from 'mirrorx'\nimport {globalConstants} from './globalConstants'\n\nconst mapStateToProps = state => ({\n    bossDmg: state.report.bossDmg,\n    fight: state.report.fight,\n    bossTrashDmg: state.report.bossTrashDmg,\n    bossTrashSunderCasts: state.report.bossTrashSunderCasts,\n    poisonDmgTaken: state.report.poisonDmgTaken,\n})\n\nclass DashboardPage extends Component{\n\n    constructor(props) {\n        super(props)\n        this.state={\n            report: null,\n            loading: false\n        }\n    }\n\n    submit = () => {\n        let promises = []\n        this.setState({loading: true})\n\n        promises.push(actions.report.getBOSSDmg(this.state.report))\n        promises.push(actions.report.getFight(this.state.report))\n        promises.push(actions.report.getPoisonDmgTaken(this.state.report))\n        Promise.all(promises).then(()=>{\n            promises = []\n            const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\n            const bossIds = this.findTargetIds(globalConstants.BOSSIDS, this.props.fight)\n            const bossTrashIds = this.findTargetIds(globalConstants.EXTRABOSSIDS, this.props.fight)\n            promises.push(actions.report.getBossTrashDmg({trashIds, reportId: this.state.report}))\n            promises.push(actions.report.getExtraBossDmg({bossTrashIds, reportId: this.state.report}))\n            promises.push(actions.report.getBossTrashSunderCasts({trashIds: trashIds.concat(bossIds), reportId: this.state.report}))\n            Promise.all(promises).then(()=>{\n                this.setState({loading: false})\n            })\n        })\n    }\n\n    findTargetIds = (trashIds, fight) => {\n        const enemies = fight?.enemies\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\n    }\n\n    calculateBossTime = (fight) => {\n        let sum = 0\n        fight&&fight.fights.filter(record=>record.boss!==0).map(record=>{\n            sum+=record.end_time-record.start_time\n        })\n        return sum/1000\n    }\n\n    generateSource = () => {\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, poisonDmgTaken} = this.props\n        let bossDmgMax = {}\n        let bossTrashDmgMax = {}\n        const bossTime = this.calculateBossTime(this.props.fight)\n        let source = bossDmg?.map(entry=>{\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\n            const sunderCasts = bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder\n            const poisonTicks = poisonDmgTaken?.find(trashEntry=>trashEntry.id===entry.id)?.tickCount\n            bossDmgMax[entry.type] = bossDmgMax[entry.type] > entry.total ? bossDmgMax[entry.type] : entry.total\n            bossTrashDmgMax[entry.type] = bossTrashDmgMax[entry.type] > trashDmg ? bossTrashDmgMax[entry.type] : trashDmg\n            return {\n                id: entry.id,\n                name: entry.name,\n                type: entry.type,\n                bossDmg: entry.total,\n                bossDps: (entry.total/bossTime).toFixed(2),\n                bossTrashDmg: trashDmg,\n                poisonTicks: poisonTicks,\n                sunderCasts: sunderCasts,\n            }\n        })\n\n        source = source?.map(entry=>{\n            const bossScore =  (entry.bossDmg/bossDmgMax[entry.type]).toFixed(2)\n            const bossTrashScore =  (entry.bossTrashDmg/bossTrashDmgMax[entry.type]).toFixed(2)\n            entry.bossScore = bossScore\n            entry.bossTrashScore = bossTrashScore\n            entry.finalScore = ((parseFloat(bossScore)+parseFloat(bossTrashScore))/2) .toFixed(2)\n            return entry\n        })\n        return source\n    }\n\n    render() {\n        const dataSource =  this.generateSource()\n        const columns = [\n            {\n                title: 'ID',\n                dataIndex: 'name',\n            },\n            {\n                title: '职业',\n                dataIndex: 'type',\n                filters: [\n                    {\n                        text: '战',\n                        value: 'Warrior',\n                    },\n                    {\n                        text: '法',\n                        value: 'Mage',\n                    },\n                    {\n                        text: '术',\n                        value: 'Warlock',\n                    },\n                    {\n                        text: '猎',\n                        value: 'Hunter',\n                    },\n                    {\n                        text: '贼',\n                        value: 'Rogue',\n                    },\n                    {\n                        text: '德',\n                        value: 'Druid',\n                    },\n                    {\n                        text: '牧',\n                        value: 'Priest',\n                    },\n                    {\n                        text: '骑',\n                        value: 'Paladin',\n                    },\n                    {\n                        text: '萨',\n                        value: 'Shaman',\n                    },\n\n                ],\n                onFilter: (value, record) => record.type === value ,\n            },\n            {\n                title: 'Boss伤害',\n                dataIndex: 'bossDmg',\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\n            },\n            {\n                title: 'Boss DPS',\n                dataIndex: 'bossDps',\n            },\n            {\n                title: '全程有效伤害',\n                dataIndex: 'bossTrashDmg',\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\n                defaultSortOrder: 'descend',\n            },\n            {\n                title: '战士有效破甲数量',\n                dataIndex: 'sunderCasts',\n                render: (text,record)=> record.type ==='Warrior' ? text : ''\n            },\n            {\n                title: '软泥毒箭DOT伤害次数',\n                dataIndex: 'poisonTicks',\n                sorter: (a, b) => a.poisonTicks-b.poisonTicks,\n            },\n            {\n                title: 'BOSS分',\n                dataIndex: 'bossScore',\n            },\n            {\n                title: '全程分',\n                dataIndex: 'bossTrashScore',\n            },\n            {\n                title: '平均分',\n                dataIndex: 'finalScore',\n                sorter: (a, b) => a.finalScore-b.finalScore,\n            },\n        ]\n        return (\n            <Card title={<div>\n                <Input\n                    style={{width: 400}}\n                    placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\n                    onChange={event => this.setState({report: event.target.value})}/>\n                <Button onClick={this.submit}>提交</Button>\n            </div>}>\n                <Table\n                    size=\"small\"\n                    loading={this.state.loading}\n                    dataSource={dataSource}\n                    columns={columns}\n                    rowKey='id'\n                    pagination={false}\n                />\n            </Card>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, null) (DashboardPage)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getDamageTakenByAbility\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExtraBossDmg({reportId, bossTrashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            bossTrashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n    }\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nmirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}