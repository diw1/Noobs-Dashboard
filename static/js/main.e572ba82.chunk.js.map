{"version":3,"sources":["globalConstants.js","Tactical.js","App.js","serviceWorker.js","services/axios.js","services/index.js","models/report.js","index.js"],"names":["globalConstants","API_KEY","BASE_URL","ENDTIME","TRASHIDS","EXCLUDEIDS","REMOVEBOSSIDS","BOSSIDS","HUNTERAURA","CHAINID","WEBWRAPID","SUNDERDEBUFFID","BLOODTHIRSTID","SHOTID","VISCIDUSID","VEKNISSID","VEKNISS_THRESHOLD","MANA_POTIONID","SWIFT_BOOT_ID","STOPWATCH_ID","DARK_RUNEID","DEMON_RUNEID","DENSE_BOMB","HAT","SLIME","DEATHWISH","RECKLESSNESS","BLADEFLURRY","RUSH","PUMMEL","SHIELDBASH","KICK","INTERRUPT1","THADDIUS_ENCOUNTER_ID","LOATHEB_ENCOUNTER_ID","NOTH_ENCOUNTER_ID","RESTO","DARKRES","ICERES","NATUREDMG1","NATUREDMG2","HEIGAN_ENCOUNTER_ID","SWIFT_BOOT_ITEM_ID","ROCKET_BOOT_ITEM_ID","FOUR_ENCOUNTER_ID","MAEXXNA_ENCOUNTER_ID","LIFE_STEAL_ID","ANUB_ENCOUNTER_ID","KEL_ENCOUNTER_ID","KEL_ID","MELEE_ID","BS1_ID","BS4_ID","HS_ID","WW_ID","EX_ID","TacticalTable","dataSource","this","props","tactics","rowClassName","record","type","size","loading","columns","title","dataIndex","filters","text","value","onFilter","children","render","item","natureres","darkres2","rowKey","pagination","Component","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","DashboardPage","downloadExcel","setState","actions","report","getFight","state","then","getFightsData","submit","tactical","promises","push","getBOSSDmg","Promise","all","slimeID","findTargetIds","fight","interruptID","getSlime","reportId","getThaddius","get4DK","getSpider","trashIds","filteredBossIds","filter","v","includes","removedBossIds","kelID","getKelParry","getBossTrashDmg","getExcludedBossDmg","getManaPotion","getRogueSunderDebuff","getChainDebuff","getWebWrapDebuff","getRunes","getHunterbuff","getBossTrashSunderCasts","concat","enemies","map","enemy","guid","id","calculateBossTime","sum","fights","boss","end_time","start_time","calculatedSunderAvg","sunderCasts","sumWithoutTop4","i","sunder","sort","a","b","slice","reduce","furyWarriorCounts","length","Math","floor","calculateManualSum","manual","newManual","Object","values","generateSource","bossDmg","bossTrashDmg","bossTrashSunderCasts","manaPotion","runes","filteredBossDmg","hunterAura","chainDebuff","webWrapDebuff","rogueSunderDebuff","kelParry","finalDmgMax","sunderBase","source","entry","trashDmg","find","trashEntry","total","filteredBossDmgData","rogueSunder","sunderPenalty","manaPotionCasts","runesCasts","chainTime","round","totalUptime","kelParryDmg","webWrapTime","hunterAuraPenalty","totalUses","finalDamage","Number","name","finalScore","toFixed","handleManualChange","e","target","mergeTactics","slimeTactics","thaddiusTactics","fourTactics","spiderTactics","_","zipWith","fightsData","excelDataSource","sorter","QuestionCircleOutlined","chain","onBlur","style","maxWidth","web","tel","other","defaultSortOrder","gutter","checked","onChange","checkedChildren","unCheckedChildren","width","placeholder","event","onClick","element","data","label","Tactical","connect","Boolean","window","location","hostname","match","callAPI","method","url","headers","axios","getData","getDMGdone","reportID","getBOSSDMG","getBOSSTrashDmg","trashIDs","getBOSSTrashCast","getFightSummary","start","end","getDamageTakenByAbility","abilityId","getDebuffsByAbility","getDamageDoneByAbilityAndTarget","targetId","getCastsByAbility","getBuffsByAbility","getCastsByAbilityAndEncounter","encounterID","initialState","dmg","poisonDmgTaken","viscidusBanned","swiftBoot","stopWatch","reducers","save","effects","getS","getState","getDmg","service","result","entries","getPoisonDmgTaken","POISONID","auras","validIds","x","aura","trashId","trashRecords","trashRecord","res","cloneDeep","newDmg","isInteger","newPromises","newCast","abilities","ability","getViscidusBanned","viscidusId","EXECUTEID","banned","hitCount","getViscidusCasts","viscidusCasts","fightsPromises","fightsSummary","BattleID","BattleName","StartTime","EndTime","composition","player","class","mark","damageDone","healingDone","getStopWatch","getSwiftBoot","dense1","hat","resto","gear","deathwish1","deathwish2","deathwish3","recklessness","darkres","absorb","hitdetails","hitdetail","interrupt1","rocketBoot","absorbOrOverheal","interrupt2","iceres","abilityID","isMelee","avgDmg","parryCount","missdetails","detail","count","cpDmg","console","log","mirror","model","reportModel","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e572ba82.chunk.js","sourcesContent":["export const globalConstants = {\r\n    API_KEY: '8973e2f9f9412a72ff5f0aa377e1f391',\r\n    BASE_URL: 'https://classic.warcraftlogs.com/v1/',\r\n    ENDTIME: 60*60*1000*12,  //12 Hours\r\n    TRASHIDS: [16778, 16449, 16505, 15981, 15979, 16025, 16193, 16154, 16375, 15976, 16400, 16243, 16156, 16861, 15975, 16290, 16474, 16164,\r\n        16506, 16573, 16168, 16020, 16022, 15977, 16163, 16984, 51179550, 16165, 16194, 16145, 16146, 16017, 16775, 16447, 16158, 16363,\r\n        16776, 16129, 15980, 16290, 16453, 16021, 16029, 16024, 16157, 16137, 15974, 16018, 17055, 16446, 16244, 16486, 16215, 15978,\r\n        16368, 16216, 16067],\r\n    EXCLUDEIDS: [15928, 15929, 15930, 16011, 16063, 16062, 16064, 16065, 16060, 16428, 16429, 16427, 16441, 16803, 16124, 16125, 16126,\r\n        16127, 16149, 16148, 16150, 16297, 16036, 16037, 16034, 16236, 16360, 16068, 14881, 16030, 16286, 4075, 16998],\r\n    REMOVEBOSSIDS: [15928, 15929, 15930, 16011, 16060, 16063, 16062, 16064, 16065],\r\n    BOSSIDS:[15990,15928, 16062, 16065, 16028, 16064, 16060, 16061, 15929, 15932, 15931, 16011, 16063, 15954, 15936, 15989, 15930, 15952, 15956, 15953],\r\n    HUNTERAURA: 20906,\r\n    CHAINID: 28410,\r\n    WEBWRAPID:28622,\r\n    SUNDERDEBUFFID: 11198,\r\n    BLOODTHIRSTID: 23894,\r\n    SHOTID: 5019,\r\n    VISCIDUSID:15299,\r\n    VEKNISSID:26078,\r\n    VEKNISS_THRESHOLD: 1500, //ms\r\n    MANA_POTIONID: 17531,\r\n    SWIFT_BOOT_ID: 9175,\r\n    STOPWATCH_ID: 14530,\r\n    DARK_RUNEID: 27869,\r\n    DEMON_RUNEID: 16666,\r\n    DENSE_BOMB: 23063, //致密炸弹\r\n    HAT: 11828, //电磁帽\r\n    SLIME: 16024, //胖子区软泥\r\n    DEATHWISH: 12328, //死愿ID\r\n    RECKLESSNESS: 1719, //鲁莽ID\r\n    BLADEFLURRY: 13877, //乱舞ID\r\n    RUSH: 13750, //冲动ID\r\n    PUMMEL: 6554, //拳击ID\r\n    SHIELDBASH: 1672, //盾击ID\r\n    KICK: 1769, //脚踢ID\r\n    INTERRUPT1: 15987, //侍僧ID\r\n    THADDIUS_ENCOUNTER_ID: 1120, //电男encounterID\r\n    LOATHEB_ENCOUNTER_ID: 1115, //孢子encounterID\r\n    NOTH_ENCOUNTER_ID: 1117, //诺斯encounterID\r\n    RESTO: 11359, //滋补药水\r\n    DARKRES: 17548, //强效暗抗药水\r\n    ICERES: 17544, //强效暗抗药水\r\n    NATUREDMG1: 30043, //小蜘蛛自然伤害1\r\n    NATUREDMG2: 28428, //小蜘蛛自然伤害2\r\n    HEIGAN_ENCOUNTER_ID: 1112, //希尔盖\r\n    SWIFT_BOOT_ITEM_ID: 7391, //迅捷鞋物品ID\r\n    ROCKET_BOOT_ITEM_ID: 7189, //火箭鞋物品ID\r\n    FOUR_ENCOUNTER_ID: 1121, //4DKencounterID\r\n    MAEXXNA_ENCOUNTER_ID: 1116, //蜘蛛3 ID\r\n    LIFE_STEAL_ID: 28542, //冰龙生命吸取ID\r\n    ANUB_ENCOUNTER_ID: 1107, //蜘蛛1 ID\r\n    KEL_ENCOUNTER_ID: 1114, //老克ID\r\n    KEL_ID: 15990,\r\n    MELEE_ID: 1,\r\n    BS1_ID:23881,\r\n    BS4_ID:23894,\r\n    HS_ID: 25286,\r\n    WW_ID: 1680,\r\n    EX_ID: 20647,\r\n\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Table} from 'antd'\r\n\r\nclass TacticalTable extends Component{\r\n\r\n    render() {\r\n        const dataSource =  this.props.tactics\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: '构造区',\r\n                children: [\r\n                    {\r\n                        title: '胖子+软泥',\r\n                        children: [\r\n                            {\r\n                                title: '致密伤害',\r\n                                dataIndex: 'dense1',\r\n                            },\r\n                            {\r\n                                title: '帽子伤害',\r\n                                dataIndex: 'hat',\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        title: '电男死愿/冲动',\r\n                        dataIndex: 'deathwish1',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '瘟疫区',\r\n                children: [\r\n                    {\r\n                        title: '诺斯滋补',\r\n                        dataIndex: 'resto',\r\n                    },\r\n                    {\r\n                        title: '跳舞男迅捷鞋',\r\n                        dataIndex: 'swiftBoot',\r\n                    },\r\n                    {\r\n                        title: '孢子死愿/冲动',\r\n                        dataIndex: 'deathwish2',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '4DK',\r\n                children: [\r\n                    {\r\n                        title: '暗抗',\r\n                        dataIndex: 'darkres',\r\n                    },\r\n                    {\r\n                        title: '鲁莽/乱舞',\r\n                        dataIndex: 'recklessness',\r\n                    },\r\n                    {\r\n                        title: '死愿/冲动',\r\n                        dataIndex: 'deathwish3',\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '蜘蛛区',\r\n                children: [\r\n                    {\r\n                        title: '自然抗',\r\n                        dataIndex: 'natureres',\r\n                        render: (text, item)=> item.natureres ? '有':'可能没有'\r\n                    },\r\n                    {\r\n                        title: '蜘蛛1火箭鞋',\r\n                        dataIndex: 'rocketBoot',\r\n                    },\r\n                    {\r\n                        title: '侍僧打断',\r\n                        dataIndex: 'interrupt1',\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                title: '中心区',\r\n                children: [\r\n                    {\r\n                        title: '冰龙暗抗吸收',\r\n                        dataIndex: 'darkres2',\r\n                        render: (text, item)=> !item.darkres2 && '没有'\r\n                    },\r\n                    {\r\n                        title: '老克冰抗',\r\n                        dataIndex: 'iceres',\r\n                    },\r\n                    {\r\n                        title: '老克打断',\r\n                        dataIndex: 'interrupt2',\r\n                    },\r\n                ]\r\n            },\r\n\r\n\r\n            // {\r\n            //     title: '总分',\r\n            //     dataIndex: 'finalDamage',\r\n            //     sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n            //     defaultSortOrder: 'descend',\r\n            // },\r\n            // {\r\n            //     title: '百分比',\r\n            //     dataIndex: 'finalScore',\r\n            // },\r\n        ]\r\n        return (\r\n            <Table\r\n                rowClassName={record=>record.type}\r\n                size=\"small\"\r\n                loading={this.props.loading}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                rowKey='id'\r\n                pagination={false}\r\n            />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TacticalTable\r\n","import React, {Component} from 'react'\r\nimport _ from 'lodash'\r\nimport {Button, Input, Table, Card, Tooltip, Col, Row, Switch} from 'antd'\r\nimport {QuestionCircleOutlined} from '@ant-design/icons'\r\nimport {actions, connect} from 'mirrorx'\r\nimport {globalConstants} from './globalConstants'\r\nimport './index.css'\r\nimport ReactExport from 'react-data-export'\r\nimport TacticalTable from './Tactical'\r\n\r\nconst ExcelFile = ReactExport.ExcelFile\r\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet\r\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn\r\n\r\nclass DashboardPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            report: null,\r\n            loading: false,\r\n            manual: [],\r\n            tactical: false\r\n        }\r\n    }\r\n\r\n    downloadExcel = () => {\r\n        this.setState({loading: true})\r\n        actions.report.getFight(this.state.report).then(()=>{\r\n            actions.report.getFightsData(this.state.report).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n        })\r\n    }\r\n\r\n    submit = () => {\r\n        const {tactical, report} = this.state\r\n        let promises = []\r\n        this.setState({loading: true})\r\n        promises.push(actions.report.getBOSSDmg(this.state.report))\r\n        promises.push(actions.report.getFight(this.state.report))\r\n        Promise.all(promises).then(()=>{\r\n            promises = []\r\n            if (tactical){\r\n                const slimeID = this.findTargetIds([globalConstants.SLIME], this.props.fight)\r\n                const interruptID = this.findTargetIds([globalConstants.INTERRUPT1], this.props.fight)\r\n                promises.push(actions.report.getSlime({reportId: report, slimeID}))\r\n                promises.push(actions.report.getThaddius(report))\r\n                promises.push(actions.report.get4DK(report))\r\n                promises.push(actions.report.getSpider({reportId: report, interruptID}))\r\n            }else {\r\n                const trashIds = this.findTargetIds(globalConstants.TRASHIDS, this.props.fight)\r\n                const filteredBossIds = this.findTargetIds(globalConstants.BOSSIDS.filter(v => !globalConstants.REMOVEBOSSIDS.includes(v)), this.props.fight)\r\n                const removedBossIds = this.findTargetIds(globalConstants.REMOVEBOSSIDS, this.props.fight)\r\n                const kelID = this.findTargetIds([globalConstants.KEL_ID], this.props.fight)\r\n                promises.push(actions.report.getKelParry({reportId: report, kelID}))\r\n                promises.push(actions.report.getBossTrashDmg({trashIds, reportId: report, removedBossIds}))\r\n                promises.push(actions.report.getExcludedBossDmg({removedBossIds, reportId: report}))\r\n                promises.push(actions.report.getManaPotion(report))\r\n                promises.push(actions.report.getRogueSunderDebuff(report))\r\n                promises.push(actions.report.getChainDebuff(report))\r\n                promises.push(actions.report.getWebWrapDebuff(report))\r\n                promises.push(actions.report.getRunes(report))\r\n                promises.push(actions.report.getHunterbuff(report))\r\n                promises.push(actions.report.getBossTrashSunderCasts({\r\n                    trashIds: trashIds.concat(filteredBossIds),\r\n                    reportId: this.state.report}))\r\n            }\r\n            Promise.all(promises).then(()=>{\r\n                this.setState({loading: false})\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    findTargetIds = (trashIds, fight) => {\r\n        const enemies = fight?.enemies\r\n        return enemies.map(enemy=>trashIds.includes(enemy.guid)&&enemy.id).filter(id=>!!id)\r\n    }\r\n\r\n    calculateBossTime = (fight) => {\r\n        let sum = 0\r\n        fight&&fight.fights.filter(record=>record.boss!==0).map(record=>{\r\n            sum+=record.end_time-record.start_time\r\n        })\r\n        return sum/1000\r\n    }\r\n\r\n    calculatedSunderAvg = (sunderCasts) => {\r\n        let sumWithoutTop4 = sunderCasts?.map(i=>i.sunder).sort((a,b)=>b-a).slice(4).reduce((sum, item)=>sum+item)\r\n        let furyWarriorCounts = sunderCasts?.filter(item=> item.type ==='Warrior')?.length\r\n        return Math.floor(sumWithoutTop4/(furyWarriorCounts-4)*0.7)\r\n    }\r\n\r\n    calculateManualSum = (manual) => {\r\n        const newManual = {...manual, id:0}\r\n        return Object.values(newManual)?.reduce((a, b) => a + b, 0)\r\n    }\r\n\r\n    generateSource = () => {\r\n        const {bossDmg, bossTrashDmg, bossTrashSunderCasts, manaPotion, runes, filteredBossDmg, hunterAura, chainDebuff, webWrapDebuff, rogueSunderDebuff, kelParry} = this.props\r\n        let finalDmgMax = {}\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        let source = bossDmg?.map(entry=>{\r\n            const trashDmg = bossTrashDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const filteredBossDmgData = filteredBossDmg?.find(trashEntry=>trashEntry.id===entry.id)?.total\r\n            const sunderCasts = entry.type === 'Warrior' ? bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.sunder :\r\n                bossTrashSunderCasts?.find(trashEntry=>trashEntry.id===entry.id)?.rogueSunder ? rogueSunderDebuff : 0\r\n            const sunderPenalty = entry.type==='Warrior' ? sunderCasts < sunderBase  ? Math.floor(-0.05 * trashDmg) : 0 :\r\n                entry.type==='Rogue' ? sunderCasts * 2000 : 0\r\n            const manual = this.state.manual.find(trashEntry=>trashEntry.id===entry.id) || {}\r\n            const manaPotionCasts = manaPotion?.find(trashEntry=>trashEntry.id===entry.id)?.total || 0\r\n            const runesCasts = runes?.find(trashEntry=>trashEntry.id===entry.id)?.runes\r\n            const chainTime = Math.round(chainDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const kelParryDmg = kelParry?.find(trashEntry=>trashEntry.id===entry.id)?.kelParryDmg\r\n            const webWrapTime = Math.round(webWrapDebuff?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime/1000) || ''\r\n            const hunterAuraStatus = hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUses>12 || hunterAura?.find(trashEntry=>trashEntry.id===entry.id)?.totalUptime>500000\r\n            const hunterAuraPenalty = hunterAuraStatus && (entry.type==='Warrior'||entry.type==='Rogue') ? Math.floor(-0.015 * trashDmg) : 0\r\n            const finalDamage = Number(trashDmg) + Number(sunderPenalty) + Number(hunterAuraPenalty) + Number(kelParryDmg) + this.calculateManualSum(manual)\r\n            finalDmgMax[entry.type] = finalDmgMax[entry.type] > finalDamage ? finalDmgMax[entry.type] : finalDamage\r\n            return {\r\n                id: entry.id,\r\n                name: entry.name,\r\n                type: entry.type,\r\n                bossDmg: entry.total,\r\n                bossTrashDmg: trashDmg,\r\n                sunderCasts,\r\n                manaPotionCasts,\r\n                runesCasts,\r\n                filteredBossDmgData,\r\n                sunderPenalty,\r\n                hunterAuraPenalty,\r\n                finalDamage,\r\n                chainTime,\r\n                webWrapTime,\r\n                manual,\r\n                kelParryDmg\r\n            }\r\n        })\r\n\r\n        source = source?.map(entry=>{\r\n            entry.finalScore = (entry.finalDamage/finalDmgMax[entry.type]).toFixed(2)\r\n            return entry\r\n        })\r\n        return source\r\n    }\r\n\r\n    handleManualChange = (e, record, type) => {\r\n        const newManual = this.state.manual.find(item=>item.id == record.id) ?\r\n            this.state.manual.map(item=>item.id === record.id ? {...item, [type]: Number(e.target.value)} : item) :\r\n            this.state.manual.concat([{id: record.id, [type]: Number(e.target.value)}])\r\n        this.setState({\r\n            manual: newManual\r\n        })\r\n    }\r\n\r\n    mergeTactics = () => {\r\n        const {slimeTactics, thaddiusTactics, fourTactics, spiderTactics} = this.props\r\n        const tacticsArray = [slimeTactics, thaddiusTactics, fourTactics, spiderTactics]\r\n        return tacticsArray.reduce((sum,item)=>_.zipWith(sum, item, (a,b,)=>({...a,...b})))\r\n    }\r\n\r\n    render() {\r\n        const {fightsData, bossTrashSunderCasts} = this.props\r\n        const tactics = this.mergeTactics()\r\n        const {tactical, loading} = this.state\r\n        const sunderBase = this.calculatedSunderAvg(bossTrashSunderCasts)\r\n        const dataSource =  this.generateSource()\r\n        const excelDataSource = fightsData\r\n        const columns = [\r\n            {\r\n                title: 'ID',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '职业',\r\n                dataIndex: 'type',\r\n                filters: [\r\n                    {\r\n                        text: '战',\r\n                        value: 'Warrior',\r\n                    },\r\n                    {\r\n                        text: '法',\r\n                        value: 'Mage',\r\n                    },\r\n                    {\r\n                        text: '术',\r\n                        value: 'Warlock',\r\n                    },\r\n                    {\r\n                        text: '猎',\r\n                        value: 'Hunter',\r\n                    },\r\n                    {\r\n                        text: '贼',\r\n                        value: 'Rogue',\r\n                    },\r\n                    {\r\n                        text: '德',\r\n                        value: 'Druid',\r\n                    },\r\n                    {\r\n                        text: '牧',\r\n                        value: 'Priest',\r\n                    },\r\n                    {\r\n                        text: '骑',\r\n                        value: 'Paladin',\r\n                    },\r\n                    {\r\n                        text: '萨',\r\n                        value: 'Shaman',\r\n                    },\r\n\r\n                ],\r\n                onFilter: (value, record) => record.type === value ,\r\n            },\r\n            {\r\n                title: 'Boss伤害',\r\n                dataIndex: 'bossDmg',\r\n                sorter: (a, b) => a.bossDmg-b.bossDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"去除DK2, DK3，孢子男，电男的伤害\">\r\n                    <span>有效boss伤害<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'filteredBossDmgData',\r\n            },\r\n            {\r\n                title: '全程有效伤害',\r\n                dataIndex: 'bossTrashDmg',\r\n                sorter: (a, b) => a.bossTrashDmg-b.bossTrashDmg,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"贼的破甲为强破\">\r\n                    <span>有效破甲<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderCasts',\r\n                render: (text,record)=> record.type ==='Warrior' || record.type ==='Rogue' ? text : '',\r\n            },\r\n            {\r\n                title: <Tooltip title={`平均数的70%为: ${sunderBase}，不足的扣5%有效伤害, 贼每个成功的强破补偿2000伤害`}>\r\n                    <span>破甲补/扣分<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'sunderPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: <Tooltip title=\"扣1.5%有效伤害\">\r\n                    <span>强击光环扣除<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                dataIndex: 'hunterAuraPenalty',\r\n                render: text=> text !== 0 ? text : null,\r\n            },\r\n            {\r\n                title: '老克',\r\n                children: [\r\n                    {\r\n                        title: '心控时间',\r\n                        dataIndex: 'chainTime',\r\n                    },\r\n                    {\r\n                        title: '心控补分',\r\n                        dataIndex: ['manual','chain'],\r\n                        render: (text, record) => <Input value={this.state.manual.chain} onBlur={(e)=>this.handleManualChange(e, record, 'chain')} style={{maxWidth: 85}}/>\r\n                    },\r\n                    {\r\n                        title: <Tooltip title=\"对于所有的招架，战士的肉搏伤害按照个人平均值两倍进行补偿；战士技能伤害，贼肉搏伤害按照个人平均值进行补偿\">\r\n                            <span>招架补偿<QuestionCircleOutlined /></span>\r\n                        </Tooltip>,\r\n                        dataIndex: 'kelParryDmg',\r\n                        render: text=> text !== 0 ? text : null,\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title:<Tooltip title=\"蜘蛛3上墙\">\r\n                    <span>蛛网裹体<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                children: [\r\n                    {\r\n                        title: '时间',\r\n                        dataIndex: 'webWrapTime',\r\n                    },\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','web'],\r\n                        render: (text, record) => <Input value={this.state.manual.web} onBlur={(e)=>this.handleManualChange(e, record, 'web')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title:<Tooltip title=\"传送时间无法自动获取\">\r\n                    <span>跳舞男传送<QuestionCircleOutlined /></span>\r\n                </Tooltip>,\r\n                children: [\r\n                    {\r\n                        title: '补分',\r\n                        dataIndex: ['manual','tel'],\r\n                        render: (text, record) => <Input value={this.state.manual.tel} onBlur={(e)=>this.handleManualChange(e, record, 'tel')} style={{maxWidth: 85}}/>\r\n                    },\r\n\r\n                ]\r\n            },\r\n            {\r\n                title: '大蓝',\r\n                dataIndex: 'manaPotionCasts',\r\n                sorter: (a, b) => a.manaPotionCasts-b.manaPotionCasts,\r\n            },\r\n            {\r\n                title: '符文',\r\n                dataIndex: 'runesCasts',\r\n                sorter: (a, b) => a.runesCasts-b.runesCasts,\r\n            },\r\n            {\r\n                title: '其他补/扣分',\r\n                dataIndex: ['manual','other'],\r\n                render: (text, record) => <Input value={this.state.manual.other} onBlur={(e)=>this.handleManualChange(e, record, 'other')} style={{maxWidth: 100}}/>\r\n            },\r\n            {\r\n                title: '总分',\r\n                dataIndex: 'finalDamage',\r\n                sorter: (a, b) => a.finalDamage-b.finalDamage,\r\n                defaultSortOrder: 'descend',\r\n            },\r\n            {\r\n                title: '百分比',\r\n                dataIndex: 'finalScore',\r\n            },\r\n        ]\r\n        return (\r\n            <Card title={<Row type=\"flex\" gutter={16}>\r\n                <Col>\r\n                    <Switch\r\n                        checked={tactical}\r\n                        onChange={(checked)=>this.setState({tactical: checked})}\r\n                        checkedChildren=\"战术动作\"\r\n                        unCheckedChildren=\"伤害统计\"\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    <Input\r\n                        style={{width: 400}}\r\n                        placeholder=\"请粘贴reportID，例如: Jzx9tgnTKvVwAX\"\r\n                        onChange={event => this.setState({report: event.target.value})}/>\r\n                </Col>\r\n                <Col>\r\n                    <Button onClick={this.submit}>提交</Button>\r\n                </Col>\r\n                {!tactical && <Col><Button onClick={this.downloadExcel}>生成下载链接</Button></Col>}\r\n                {excelDataSource &&  <Col><ExcelFile element={<Button>下载</Button>}>\r\n                    <ExcelSheet data={excelDataSource} name=\"原始数据\">\r\n                        <ExcelColumn label=\"mark\" value=\"mark\"/>\r\n                        <ExcelColumn label=\"BattleID\" value=\"BattleID\"/>\r\n                        <ExcelColumn label=\"BattleName\" value=\"BattleName\"/>\r\n                        <ExcelColumn label=\"StartTime\" value=\"StartTime\"/>\r\n                        <ExcelColumn label=\"EndTime\" value=\"EndTime\"/>\r\n                        <ExcelColumn label=\"class\" value=\"class\"/>\r\n                        <ExcelColumn label=\"name\" value=\"name\"/>\r\n                        <ExcelColumn label=\"damage-done\" value=\"damage-done\"/>\r\n                        <ExcelColumn label=\"healing\" value=\"healing\"/>\r\n                    </ExcelSheet>\r\n                </ExcelFile>\r\n                </Col>}\r\n            </Row>}>\r\n                {tactical ?\r\n                    <TacticalTable\r\n                        loading={loading}\r\n                        tactics={tactics}\r\n                    /> :\r\n                    <Table\r\n                        rowClassName={record => record.type}\r\n                        size=\"small\"\r\n                        loading={loading}\r\n                        dataSource={dataSource}\r\n                        columns={columns}\r\n                        rowKey='id'\r\n                        pagination={false}\r\n                    />\r\n                }\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state=>state.report) (DashboardPage)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import axios from 'axios'\r\n\r\nfunction callAPI(method, url, headers, data,) {\r\n    return axios({\r\n        method: method,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction getData(url) {\r\n    return callAPI('GET', url, null, null)\r\n}\r\n\r\nfunction saveData(url, payload, method) {\r\n    return callAPI(method, url, null, payload)\r\n}\r\n\r\nexport { getData, saveData }\r\n","import { getData } from './axios'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\n\r\nfunction getDMGdone (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSDMG (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetclass=boss`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashDmg (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBOSSTrashCast (reportID, trashIDs) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&targetid=${trashIDs}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFight (reportID) {\r\n    const url = `${globalConstants.BASE_URL}report/fights/${reportID}?api_key=${globalConstants.API_KEY}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getFightSummary (reportID, start, end) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/summary/${reportID}?api_key=${globalConstants.API_KEY}&start=${start}&end=${end}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageTakenByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-taken/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDamageDoneByAbilityAndTarget (reportID, abilityId, targetId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/damage-done/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&targetid=${targetId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getDebuffsByAbility (reportID, abilityId, enemy= false) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/debuffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&hostility=${enemy?1:0}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getBuffsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/buffs/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbility (reportID, abilityId) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}`\r\n    return getData(url)\r\n}\r\n\r\nfunction getCastsByAbilityAndEncounter (reportID, abilityId, encounterID) {\r\n    const url = `${globalConstants.BASE_URL}report/tables/casts/${reportID}?api_key=${globalConstants.API_KEY}&end=${globalConstants.ENDTIME}&abilityid=${abilityId}&encounter=${encounterID}`\r\n    return getData(url)\r\n}\r\n\r\nexport default {\r\n    getDMGdone,\r\n    getBOSSDMG,\r\n    getBOSSTrashDmg,\r\n    getBOSSTrashCast,\r\n    getFight,\r\n    getFightSummary,\r\n    getDamageTakenByAbility,\r\n    getDebuffsByAbility,\r\n    getDamageDoneByAbilityAndTarget,\r\n    getCastsByAbility,\r\n    getBuffsByAbility,\r\n    getCastsByAbilityAndEncounter\r\n}\r\n","import service from '../services/index'\r\nimport {actions} from 'mirrorx'\r\nimport _ from 'lodash'\r\nimport {globalConstants} from '../globalConstants'\r\n\r\nexport default {\r\n    name: 'report',\r\n    initialState: {\r\n        dmg: null,\r\n        bossDmg:null,\r\n        filteredBossDmg:null,\r\n        fight:null,\r\n        bossTrashDmg:null,\r\n        poisonDmgTaken: null,\r\n        chainDebuff: null,\r\n        webWrapDebuff: null,\r\n        rogueSunderDebuff: null,\r\n        viscidusBanned: null,\r\n        hunterAura: null,\r\n        manaPotion: null,\r\n        runes: null,\r\n        swiftBoot: null,\r\n        stopWatch: null,\r\n        fightsData: null,\r\n        tactics: null,\r\n        thaddiusTactics: null,\r\n        slimeTactics: null,\r\n        fourTactics: null,\r\n        spiderTactics: null,\r\n        kelParry: null,\r\n    },\r\n    reducers: {\r\n        save(state, data) {\r\n            return {\r\n                ...state,\r\n                ...data\r\n            }\r\n        },\r\n    },\r\n    effects: {\r\n        getS(data, getState) {\r\n            return getState()\r\n        },\r\n\r\n        async getDmg(reportId){\r\n            const result = await service.getDMGdone(reportId)\r\n            actions.report.save({\r\n                dmg: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getPoisonDmgTaken(reportId){\r\n            const result = await service.getDamageTakenByAbility(reportId, globalConstants.POISONID)\r\n            actions.report.save({\r\n                poisonDmgTaken: result.data.entries\r\n            })\r\n        },\r\n\r\n\r\n        async getChainDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.CHAINID)\r\n            actions.report.save({\r\n                chainDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getRogueSunderDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.SUNDERDEBUFFID, true)\r\n            const validIds= [...globalConstants.TRASHIDS, ...globalConstants.BOSSIDS].filter(x=>!globalConstants.REMOVEBOSSIDS.includes(x))\r\n            actions.report.save({\r\n                rogueSunderDebuff: result.data?.auras?.filter(aura=>validIds.includes(aura.guid)).reduce((sum,i)=>sum+Number(i.totalUses),0)\r\n            })\r\n        },\r\n\r\n        async getWebWrapDebuff(reportId){\r\n            const result = await service.getDebuffsByAbility(reportId, globalConstants.WEBWRAPID)\r\n            actions.report.save({\r\n                webWrapDebuff: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getBossTrashDmg({reportId, trashIds, removedBossIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total + newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n            let newPromises = []\r\n            removedBossIds.map(trashId=> {\r\n                newPromises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(newPromises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashDmg: result\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        async getExcludedBossDmg({reportId, removedBossIds}){\r\n            let result = actions.report.getS().report.filteredBossDmg\r\n            let promises = []\r\n            removedBossIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashDmg(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        const newDmg = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.total = Number.isInteger(newDmg) ? res.total - newDmg : res.total\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        filteredBossDmg: result\r\n                    })\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        async getBossTrashSunderCasts({reportId, trashIds}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            trashIds.map(trashId=> {\r\n                promises.push(service.getBOSSTrashCast(reportId, trashId))\r\n            })\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.sunder = res.sunder || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲攻击')?.total\r\n                        res.sunder =  Number.isInteger(newCast) ? res.sunder + newCast : res.sunder\r\n                        res.rogueSunder = !!trashRecord.data.entries.find(i=>i.id===entry.id)?.abilities.find(ability=>ability.name===\r\n                            '破甲')\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        bossTrashSunderCasts: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusBanned({reportId, viscidusId}){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.BLOODTHIRSTID, viscidusId))\r\n            promises.push(service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.EXECUTEID, viscidusId))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.banned = res.banned || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                        res.banned =  Number.isInteger(newCast) ? res.banned + newCast : res.banned\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        viscidusBanned: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getViscidusCasts({reportId, viscidusId}){\r\n            const result = await service.getBOSSTrashCast(reportId, viscidusId)\r\n            actions.report.save({\r\n                viscidusCasts: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getBOSSDmg(reportId){\r\n            const result = await service.getBOSSDMG(reportId)\r\n            actions.report.save({\r\n                bossDmg: result.data.entries,\r\n                filteredBossDmg: result.data.entries,\r\n                tactics: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getFight(reportId){\r\n            const result = await service.getFight(reportId)\r\n            actions.report.save({\r\n                fight: result.data\r\n            })\r\n        },\r\n\r\n        async getFightsData(reportId){\r\n            let fights = actions.report.getS().report.fight.fights\r\n            const fightsPromises = fights.map(async fight=> {\r\n                const fightsSummary = await service.getFightSummary(reportId, fight.start_time, fight.end_time)\r\n                let record = {\r\n                    BattleID: fight.id,\r\n                    BattleName: fight.name,\r\n                    StartTime: fight.start_time,\r\n                    EndTime: fight.end_time,\r\n                }\r\n                return fightsSummary.data?.composition?.filter(player=>(player.type === 'Warrior' || player.type === 'Rogue')).map(player=>{\r\n                    return ({\r\n                        ...record,\r\n                        name: player.name,\r\n                        class: player.type,\r\n                        mark: record.BattleID+player.name,\r\n                        ['damage-done']: fightsSummary.data?.damageDone?.find(record=>record.id===player.id)?.total || 0,\r\n                        healing: fightsSummary.data?.healingDone?.find(record=>record.id===player.id)?.total || 0,\r\n                    })})\r\n            })\r\n            Promise.all(fightsPromises).then(trashRecords=> {\r\n                const fightsData = trashRecords.reduce((sum, trashRecord) => sum.concat(trashRecord), [])\r\n                actions.report.save({\r\n                    fightsData: fightsData\r\n                })}\r\n            )\r\n\r\n        },\r\n\r\n        async getManaPotion(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.MANA_POTIONID)\r\n            actions.report.save({\r\n                manaPotion: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getStopWatch(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.STOPWATCH_ID)\r\n            actions.report.save({\r\n                stopWatch: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getSwiftBoot(reportId){\r\n            const result = await service.getCastsByAbility(reportId, globalConstants.SWIFT_BOOT_ID)\r\n            actions.report.save({\r\n                swiftBoot: result.data.entries\r\n            })\r\n        },\r\n\r\n        async getRunes(reportId){\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DARK_RUNEID))\r\n            promises.push(service.getCastsByAbility(reportId, globalConstants.DEMON_RUNEID))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.runes = res.runes || 0\r\n                        const newCast = trashRecord.data.entries.find(i=>i.id===entry.id)?.total\r\n                        res.runes =  Number.isInteger(newCast) ? res.runes + newCast : res.runes\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        runes: result\r\n                    })\r\n\r\n                })\r\n            })\r\n        },\r\n\r\n        async getHunterbuff(reportId){\r\n            const result = await service.getBuffsByAbility(reportId, globalConstants.HUNTERAURA)\r\n            actions.report.save({\r\n                hunterAura: result.data.auras\r\n            })\r\n        },\r\n\r\n        async getSlime({reportId, slimeID}){\r\n            let result = actions.report.getS().report.tactics\r\n            //小软的致密伤害\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.DENSE_BOMB, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.dense1 =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n            //小软的帽子伤害\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.HAT, slimeID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.hat =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RESTO, globalConstants.NOTH_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.resto =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, 0, globalConstants.HEIGAN_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id).gear.find(i=>i.id===globalConstants.SWIFT_BOOT_ITEM_ID)? 1 :0\r\n                    res.swiftBoot =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    slimeTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getThaddius(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.THADDIUS_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish1 = res.deathwish1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish1 =  Number.isInteger(newCast) ? res.deathwish1 + newCast : res.deathwish1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.LOATHEB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish2 = res.deathwish2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish2 =  Number.isInteger(newCast) ? res.deathwish2 + newCast : res.deathwish2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    thaddiusTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async get4DK(reportId){\r\n            let result = actions.report.getS().report.tactics\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DEATHWISH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RUSH, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.deathwish3 = res.deathwish3 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.deathwish3 =  Number.isInteger(newCast) ? res.deathwish3 + newCast : res.deathwish3\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.RECKLESSNESS, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.BLADEFLURRY, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.recklessness = res.recklessness || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.recklessness =  Number.isInteger(newCast) ? res.recklessness + newCast : res.recklessness\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.DARKRES, globalConstants.FOUR_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.darkres =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    fourTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getSpider({reportId, interruptID}){\r\n            let result = actions.report.getS().report.tactics\r\n            //蜘蛛群自然抗吸收\r\n            service.getDamageTakenByAbility(reportId, globalConstants.NATUREDMG1).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.natureres = res.natureres || false\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails?.find(hitdetail=>hitdetail.type==='Absorb')\r\n                    res.natureres =  absorb || res.natureres\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getDamageTakenByAbility(reportId, globalConstants.NATUREDMG2).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.natureres = res.natureres || false\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails?.find(hitdetail=>hitdetail.type==='Absorb')\r\n                    res.natureres =  absorb || res.natureres\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            // 侍僧打断\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.PUMMEL, interruptID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt1 = res.interrupt1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt1 =  Number.isInteger(newCast) ? res.interrupt1 + newCast : res.interrupt1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.SHIELDBASH, interruptID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt1 = res.interrupt1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt1 =  Number.isInteger(newCast) ? res.interrupt1 + newCast : res.interrupt1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getDamageDoneByAbilityAndTarget(reportId, globalConstants.KICK, interruptID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt1 = res.interrupt1 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt1 =  Number.isInteger(newCast) ? res.interrupt1 + newCast : res.interrupt1\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            // 火箭鞋打蜘蛛1\r\n            service.getCastsByAbilityAndEncounter(reportId, 0, globalConstants.ANUB_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id).gear.find(i=>i.id===globalConstants.ROCKET_BOOT_ITEM_ID)? 1 :0\r\n                    res.rocketBoot =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n            //冰龙的暗抗\r\n\r\n            service.getDamageTakenByAbility(reportId, globalConstants.LIFE_STEAL_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.darkres2 =  true\r\n                    const absorb = record.data.entries.find(i=>i.id===entry.id)?.hitdetails.length>0 ?\r\n                        record.data.entries.find(i=>i.id===entry.id).hitdetails.find(hitdetail=> hitdetail.type==='Absorb'\r\n                            || hitdetail.type==='Tick Absorb' || hitdetail.type==='Resist' || hitdetail.type==='Tick' && hitdetail.absorbOrOverheal>0) : true\r\n                    res.darkres2 =  absorb\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            // 老克打断\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.PUMMEL, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.SHIELDBASH, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.KICK, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    res.interrupt2 = res.interrupt2 || 0\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.hitCount\r\n                    res.interrupt2 =  Number.isInteger(newCast) ? res.interrupt2 + newCast : res.interrupt2\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n\r\n            //老克冰抗\r\n            service.getCastsByAbilityAndEncounter(reportId, globalConstants.ICERES, globalConstants.KEL_ENCOUNTER_ID).then(record=>{\r\n                result = result.map(entry=>{\r\n                    let res = _.cloneDeep(entry)\r\n                    const newCast = record.data.entries.find(i=>i.id===entry.id)?.total\r\n                    res.iceres =  Number.isInteger(newCast) ? newCast : 0\r\n                    return res\r\n                })\r\n                actions.report.save({\r\n                    spiderTactics: result\r\n                })\r\n            })\r\n        },\r\n\r\n        async getKelParry({reportId, kelID}) {\r\n            const {BS1_ID, BS4_ID, MELEE_ID, WW_ID, EX_ID, HS_ID} = globalConstants\r\n            let abilities = [BS1_ID, BS4_ID, MELEE_ID, WW_ID, EX_ID, HS_ID]\r\n            let result = actions.report.getS().report.bossDmg\r\n            let promises = []\r\n            abilities.map((abilityID)=> promises.push(service.getDamageDoneByAbilityAndTarget(reportId, abilityID, kelID)))\r\n            Promise.all(promises).then(trashRecords=>{\r\n                trashRecords.map(trashRecord=>{\r\n                    const isMelee = trashRecord.data.entries.find(i=>i.type==='Warrior') && trashRecord.data.entries.find(i=>i.type==='Rogue')\r\n                    result = result.map(entry=>{\r\n                        let res = _.cloneDeep(entry)\r\n                        res.kelParryDmg = res.kelParryDmg || 0\r\n                        const player = trashRecord.data.entries.find(i=>i.id===entry.id)\r\n                        const avgDmg = player?.hitCount ? player?.total/player?.hitCount : 0\r\n                        const parryCount = avgDmg && player?.missdetails.find(detail=>detail.type==='Parry')?.count\r\n                        const cpDmg = parryCount && Math.floor(avgDmg * parryCount * (player.type==='Warrior' && isMelee ? 2: 1))\r\n                        console.log(avgDmg, parryCount, cpDmg, )\r\n                        res.kelParryDmg = Number.isInteger(cpDmg) ? res.kelParryDmg + cpDmg : res.kelParryDmg\r\n                        return res\r\n                    })\r\n                    actions.report.save({\r\n                        kelParry: result\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n","import React from 'react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport reportModel from './models/report'\nimport logger from 'redux-logger'\n\nimport mirror, { Router, Switch, render, Route } from 'mirrorx'\n\nmirror.model(reportModel)\nprocess.env.NODE_ENV === 'development' && mirror.defaults({\n    middlewares : [logger]\n})\n\nrender(\n    <Router>\n        <Switch>\n            <Route path='/' component={App}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}